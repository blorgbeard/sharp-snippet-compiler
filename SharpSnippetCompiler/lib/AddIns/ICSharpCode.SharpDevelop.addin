<AddIn name        = "SharpDevelop"
       author      = "Mike Krueger"
       copyright   = "prj:///doc/copyright.txt"
       url         = "http://www.icsharpcode.net"
       description = "SharpDevelop main module"
       addInManagerHidden = "true">
	
	<Manifest>
		<Identity name = "SharpDevelop" version = "@SharpDevelopCoreVersion"/>
	</Manifest>
	
	<Runtime>
		<Import assembly=":ICSharpCode.SharpDevelop">
			<ConditionEvaluator name="ActiveContentExtension" class="ICSharpCode.SharpDevelop.ActiveContentExtensionConditionEvaluator"/>
			<ConditionEvaluator name="ActiveViewContentUntitled" class="ICSharpCode.SharpDevelop.ActiveViewContentUntitledConditionEvaluator"/>
			<ConditionEvaluator name="ActiveWindowState" class="ICSharpCode.SharpDevelop.ActiveWindowStateConditionEvaluator"/>
			<ConditionEvaluator name="SolutionOpen" class="ICSharpCode.SharpDevelop.SolutionOpenConditionEvaluator"/>
			<ConditionEvaluator name="DebuggerSupports" class="ICSharpCode.SharpDevelop.Debugging.DebuggerSupportsConditionEvaluator"/>
			<ConditionEvaluator name="IsProcessRunning" class="ICSharpCode.SharpDevelop.Debugging.IsProcessRunningConditionEvaluator"/>
			<ConditionEvaluator name="OpenWindowState" class="ICSharpCode.SharpDevelop.OpenWindowStateConditionEvaluator"/>
			<ConditionEvaluator name="WindowActive" class="ICSharpCode.SharpDevelop.WindowActiveConditionEvaluator"/>
			<ConditionEvaluator name="WindowOpen" class="ICSharpCode.SharpDevelop.WindowOpenConditionEvaluator"/>
			<ConditionEvaluator name="WriteableProject" class="ICSharpCode.SharpDevelop.WriteableProjectConditionEvaluator"/>
			<ConditionEvaluator name="WriteableSolution" class="ICSharpCode.SharpDevelop.WriteableSolutionConditionEvaluator"/>
			<ConditionEvaluator name="ProjectActive" class="ICSharpCode.SharpDevelop.ProjectActiveConditionEvaluator"/>
			<ConditionEvaluator name="TextContent" class="ICSharpCode.SharpDevelop.DefaultEditor.Conditions.TextContentConditionEvaluator"/>
			<ConditionEvaluator name="BrowserLocation" class="ICSharpCode.SharpDevelop.BrowserDisplayBinding.BrowserLocationConditionEvaluator"/>
			<ConditionEvaluator name="RefactoringProviderSupports" class="ICSharpCode.SharpDevelop.Refactoring.RefactoringProviderSupportsConditionEvaluator"/>
			<ConditionEvaluator name="CanNavigateBack" class="ICSharpCode.SharpDevelop.CanNavigateBackConditionEvaluator"/>
			<ConditionEvaluator name="CanNavigateForward" class="ICSharpCode.SharpDevelop.CanNavigateForwardConditionEvaluator"/>
			<ConditionEvaluator name="CompareProjectProperty" class="ICSharpCode.SharpDevelop.CompareProjectPropertyConditionEvaluator"/>
			<ConditionEvaluator name="ProjectItem" class="ICSharpCode.SharpDevelop.Project.ProjectItemConditionEvaluator"/>
			
			
			<Doozer name="CustomTool" class="ICSharpCode.SharpDevelop.Project.CustomToolDoozer"/>
			<Doozer name="CustomProperty" class="ICSharpCode.SharpDevelop.Project.CustomPropertyDoozer"/>
			<Doozer name="DialogPanel" class="ICSharpCode.SharpDevelop.DialogPanelDoozer"/>
			<Doozer name="DisplayBinding" class="ICSharpCode.SharpDevelop.DisplayBindingDoozer"/>
			<Doozer name="Pad" class="ICSharpCode.SharpDevelop.PadDoozer"/>
			<Doozer name="LanguageBinding" class="ICSharpCode.SharpDevelop.LanguageBindingDoozer"/>
			<Doozer name="Parser" class="ICSharpCode.SharpDevelop.ParserDoozer"/>
			<Doozer name="ProjectContentRegistry" class="ICSharpCode.SharpDevelop.ProjectContentRegistryDoozer"/>
			<Doozer name="EditAction" class="ICSharpCode.SharpDevelop.DefaultEditor.Codons.EditActionDoozer"/>
			<Doozer name="SyntaxMode" class="ICSharpCode.SharpDevelop.DefaultEditor.Codons.SyntaxModeDoozer"/>
			<Doozer name="BrowserSchemeExtension" class="ICSharpCode.SharpDevelop.BrowserDisplayBinding.SchemeExtensionDoozer"/>
			<Doozer name="CodeCompletionBinding" class="ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.CodeCompletionBindingDoozer"/>
			<Doozer name="Debugger" class="ICSharpCode.SharpDevelop.Debugging.DebuggerDoozer"/>
			<Doozer name="Directory" class="ICSharpCode.SharpDevelop.DirectoryDoozer"/>
			<Doozer name="TaskBoundAdditionalLogger" class="ICSharpCode.SharpDevelop.Project.TaskBoundAdditionalLoggerDoozer"/>
		</Import>
		<Import assembly=":ICSharpCode.TextEditor"/>
	</Runtime>
	
	<Path name = "/SharpDevelop/Workbench/Ambiences">
		<Class id    = ".NET"
		       class = "ICSharpCode.SharpDevelop.NetAmbience"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/DisplayBindings">
		<DisplayBinding id    = "Browser"
		                title = "${res:Gui.ProjectBrowser.OpenWith.Bindings.WebBrowser}"
		                class = "ICSharpCode.SharpDevelop.BrowserDisplayBinding.BrowserDisplayBinding"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/FileFilter">
		<FileFilter id         = "AllFiles"
		            name       = "${res:SharpDevelop.FileFilter.AllFiles}"
		            extensions = "*.*"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/Pads">
		<Pad id       = "ProjectBrowser"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.ProjectScoutLabel}"
		     icon     = "PadIcons.ProjectBrowser"
		     shortcut = "Control|Alt|L"
		     class    = "ICSharpCode.SharpDevelop.Project.ProjectBrowserPad"/>
		
		<Pad id       = "ClassBrowser"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.ClassScoutLabel}"
		     icon     = "PadIcons.ClassBrowser"
		     shortcut = "Control|Shift|C"
		     class    = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ClassBrowserPad"/>
		
		<Pad id       = "SideBar"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.ToolbarLabel}"
		     icon     = "PadIcons.Toolbar"
		     shortcut = "Control|Alt|X"
		     class    = "ICSharpCode.SharpDevelop.Gui.ToolsPad"/>
		
		<Pad id       = "ErrorList"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.ErrorList}"
		     shortcut = "Control|Alt|K"
		     icon     = "PadIcons.ErrorList"
		     class    = "ICSharpCode.SharpDevelop.Gui.ErrorListPad"/>
		
		<Pad id       = "TaskList"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.TaskList}"
		     icon     = "PadIcons.TaskList"
		     class    = "ICSharpCode.SharpDevelop.Gui.TaskListPad"/>
		
		<Pad id       = "CompilerMessageView"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.OutputWindow}"
		     icon     = "PadIcons.Output"
		     shortcut = "Control|Alt|O"
		     class    = "ICSharpCode.SharpDevelop.Gui.CompilerMessageView"/>
		
		<Pad id       = "PropertyPad"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.PropertiesScoutLabel}"
		     icon     = "Icons.16x16.PropertiesIcon"
		     shortcut = "F4"
		     class    = "ICSharpCode.SharpDevelop.Gui.PropertyPad"/>
		
		<Pad id       = "FileScout"
		     category = "Tools"
		     title    = "${res:MainWindow.Windows.FileScoutLabel}"
		     icon     = "PadIcons.FileBrowser"
		     shortcut = "Control|Alt|F"
		     class    = "ICSharpCode.SharpDevelop.Gui.FileScout"/>
		
		<Pad id       = "SearchResults"
		     category = "Tools"
		     title    = "${res:MainWindow.Windows.SearchResultsLabel}"
		     icon     = "PadIcons.FindResults"
		     class    = "SearchAndReplace.SearchResultPanel"/>
		
		<Pad id       = "Bookmarks"
		     category = "Tools"
		     title    = "${res:MainWindow.Windows.BookmarksLabel}"
		     icon     = "PadIcons.Bookmarks"
		     class    = "ICSharpCode.SharpDevelop.Bookmarks.BookmarkPad"/>
		
		<Pad id       = "DefinitionView"
		     category = "Tools"
		     title    = "${res:MainWindow.Windows.DefinitionViewLabel}"
		     icon     = "PadIcons.DefinitionView"
		     class    = "ICSharpCode.SharpDevelop.Gui.DefinitionViewPad"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/Combine/FileFilter">
		<FileFilter id         = "Solution"
		            name       = "${res:SharpDevelop.FileFilter.SolutionFiles}"
		            class      = "ICSharpCode.SharpDevelop.Project.LoadSolution"
		            extensions = "*.sln"/>
		
		<FileFilter id         = "Combine"
		            name       = "${res:SharpDevelop.FileFilter.CombineFiles}"
		            class      = "ICSharpCode.SharpDevelop.Project.LoadSolution"
		            extensions = "*.cmbx"/>
		
		<FileFilter id         = "Prjx"
		            name       = "${res:SharpDevelop.FileFilter.PrjxFiles}"
		            class      = "ICSharpCode.SharpDevelop.Project.LoadSolution"
		            extensions = "*.prjx"/>
		
		<FileFilter id         = "AllFiles"
		            name       = "${res:SharpDevelop.FileFilter.AllFiles}"
		            extensions = "*.*"/>
	</Path>
	
	<!-- Project browser Paths -->
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ToolBar/Standard">
		<Condition name = "SolutionOpen" action="Disable">
			<ToolbarItem id      = "Properties"
			             icon    = "Icons.16x16.PropertiesIcon"
			             tooltip = "${res:MainWindow.Windows.PropertiesScoutLabel}"
			             class   = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
			<ToolbarItem id = "PropertySeparator" type = "Separator"/>
			<ToolbarItem id      = "ShowAll"
			             type    = "CheckBox"
			             icon    = "ProjectBrowser.Toolbar.ShowHiddenFiles"
			             tooltip = "${res:Gui.ProjectBrowser.ShowAllFiles}"
			             class   = "ICSharpCode.SharpDevelop.Project.Commands.ToggleShowAll"/>
			<ToolbarItem id      = "Refresh"
			             icon    = "ProjectBrowser.Toolbar.Refresh"
			             tooltip = "${res:AddIns.HtmlHelp2.Refresh}"
			             class   = "ICSharpCode.SharpDevelop.Project.Commands.RefreshProjectBrowser"/>
		</Condition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ToolBar/File">
		<ToolbarItem id      = "OpenFile"
		             icon    = "Icons.16x16.OpenFileIcon"
		             tooltip = "${res:Gui.ProjectBrowser.Open}"
		             class   = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowser"/>
	</Path>
	
	<Path path = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/SolutionNode">
		<MenuItem id = "Build"
		          label = "${res:XML.MainMenu.BuildMenu.BuildSolution}"
		          shortcut = "F8"
		          icon  = "Icons.16x16.BuildCombine"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.Build"/>
		<MenuItem id = "Rebuild"
		          label = "${res:XML.MainMenu.BuildMenu.RebuildSolution}"
		          shortcut = "Alt|F8"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.Rebuild"/>
		<MenuItem id = "Clean"
		          label = "${res:XML.MainMenu.BuildMenu.CleanSolution}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.Clean"/>
		<MenuItem id = "CombineBuildGroupSeparator" type = "Separator"/>
		
		<Condition name="WriteableSolution" action="Disable">
			<MenuItem id = "CombineAddMenu" label = "${res:ProjectComponent.ContextMenu.AddMenu}" type = "Menu">
				<MenuItem id    = "AddNewProjectToSolution"
				          label = "${res:ProjectComponent.ContextMenu.NewProject}"
				          icon  = "Icons.16x16.NewProjectIcon"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddNewProjectToSolution"/>
				<MenuItem id    = "AddExitingProjectToSolution"
				          label = "${res:ProjectComponent.ContextMenu.ExistingProject}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddExitingProjectToSolution"/>
				<MenuItem id    = "Separator1" type = "Separator" />
				<MenuItem id    = "AddItem"
				          label = "${res:ProjectComponent.ContextMenu.AddItem}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddExistingItemToSolution"/>
				<MenuItem id    = "AddNewSolutionFolderToSolution"
				          icon  = "ProjectBrowser.SolutionFolder.CreateNew"
				          label = "${res:ProjectComponent.ContextMenu.NewSolutionFolder}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddNewSolutionFolderToSolution"/>
			</MenuItem>
		</Condition>
		
		<MenuItem id = "AddSeparator" type = "Separator"/>
		<MenuItem id    = "Paste"
		          label = "${res:XML.MainMenu.EditMenu.Paste}"
		          icon  = "Icons.16x16.PasteIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.PasteProjectBrowserNode"/>
		<MenuItem id       = "Rename"
		          label    = "${res:ProjectComponent.ContextMenu.Rename}"
		          shortcut = "F2"
		          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
		<MenuItem id = "Separator3" type = "Separator"/>
		<MenuItem id    = "Properties"
		          icon  = "Icons.16x16.PropertiesIcon"
		          label = "${res:XML.MainMenu.FormatMenu.ShowProperties}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
	</Path>
	
	<Path path = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/SolutionFolderNode">
		<Include id = "CombineAddMenu" item="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/SolutionNode/CombineAddMenu"/>
		
		<MenuItem id = "AddSeparator" type = "Separator"/>
		<Include id="CutPasteRemoveRename" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutPasteRemoveRename"/>
	</Path>
	
	<Path path = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/SolutionItemNode">
		<MenuItem id = "OpenFile"
		          label = "${res:ProjectComponent.ContextMenu.Open}"
		          icon  = "Icons.16x16.OpenFileIcon"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowser"/>
		<MenuItem id      = "OpenFileWith"
		          label = "${res:Gui.ProjectBrowser.OpenWith}"
		          class   = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowserWith"/>
		<MenuItem id = "OpenFolderContainingFile"
		          label = "${res:OpenFileTabEventHandler.FileContainingFolderInExplorer}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFolderContainingFile"/>
		
		<MenuItem id = "OpenSeparator" type = "Separator" />
		<Include id="CutCopyRemoveRename" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutCopyRemoveRename"/>
	</Path>
	
	<Path path = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ProjectNode">
		<MenuItem id = "Build project"
		          label = "${res:ProjectComponent.ContextMenu.Build}"
		          icon  = "Icons.16x16.BuildCurrentSelectedProject"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.BuildProject"/>
		<MenuItem id = "Rebuild project"
		          label = "${res:ProjectComponent.ContextMenu.Rebuild}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.RebuildProject"/>
		<MenuItem id = "Clean project"
		          label = "${res:ProjectComponent.ContextMenu.Clean}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.CleanProject"/>
		<!--<MenuItem id = "Publish project"
		          label = "${res:XML.MainMenu.BuildMenu.PublishProject}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.PublishProject"/>-->
		<MenuItem id = "CombineBuildGroupSeparator" type = "Separator"/>
		
		<Condition name="WriteableProject" action="Disable">
			<MenuItem id = "ProjectAddMenu" label = "${res:ProjectComponent.ContextMenu.AddMenu}" type = "Menu" >
				<Include path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/FolderNode/Add"/>
			</MenuItem>
			
			<MenuItem id    = "AddReference"
			          label = "${res:ProjectComponent.ContextMenu.AddReference}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.AddReferenceToProject"/>
			<MenuItem id    = "AddWebReference"
			          label = "${res:ProjectComponent.ContextMenu.AddWebReference}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.AddWebReferenceToProject"/>
			<MenuItem id = "AddSeparator" type = "Separator"/>
		</Condition>
		
		<MenuItem id    = "OpenProjectWith"
		          label = "${res:Gui.ProjectBrowser.OpenWith}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowserWith"/>
		
		<Include id = "ProjectActions" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ProjectActions"/>
		<MenuItem id = "Separator2" type = "Separator"/>
		<Include id="inc" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutPasteRemoveRename"/>
		<MenuItem id = "CutCopyPasteSeparator" type = "Separator"/>
		<MenuItem id    = "Properties"
		          icon  = "Icons.16x16.PropertiesIcon"
		          label = "${res:XML.MainMenu.FormatMenu.ShowProperties}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
	</Path>
	
	<Path name="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/MissingProjectNode">
		<Include id="inc" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutPasteRemoveRename"/>
	</Path>
	
	<Path name="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/UnknownProjectNode">
		<MenuItem id    = "OpenProjectWith"
		          label = "${res:Gui.ProjectBrowser.OpenWith}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowserWith"/>
		<MenuItem id = "OpenSeparator" type = "Separator" />
		
		<Include id="inc" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutPasteRemoveRename"/>
	</Path>
	
	<Path name="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ProjectActions">
		<MenuItem id = "OpenFolder"
		          label = "${res:Gui.ProjectBrowser.OpenFolderInExplorer}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenProjectFolder"/>
		<MenuItem id = "OpenProjectOutputFolder"
		          label = "${res:ProjectComponent.ContextMenu.OpenProjectOutputFolder}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenProjectOutputFolder"/>
		
		<Condition name="IsProcessRunning" isprocessrunning="False" isdebugging="False" action="Disable">
			<MenuItem id          = "Run"
			          label       = "${res:ProjectComponent.ContextMenu.RunProject}"
			          icon        = "Icons.16x16.RunProgramIcon"
			          class       = "ICSharpCode.SharpDevelop.Project.Commands.RunProject"/>
		</Condition>
		<MenuItem id    = "SetAsStartupProject"
		          label = "${res:ProjectComponent.ContextMenu.SetAsStartupProject}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.SetAsStartupProject"/>
		<MenuItem id = "Convert"
		          label = "${res:ICSharpCode.SharpDevelop.Commands.Convert}"
		          type  = "Menu">
			<!-- elements are added by backend bindings -->
		</MenuItem>
		<MenuItem id = "GenerateDocumentation"
		          label = "${res:ProjectComponent.ContextMenu.GenerateDocumentation}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.GenerateProjectDocumentation"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ReferenceFolderNode">
		<MenuItem id    = "AddReference"
		          label = "${res:ProjectComponent.ContextMenu.AddReference}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.AddReferenceToProject"/>
		<MenuItem id    = "AddWebReference"
		          label = "${res:ProjectComponent.ContextMenu.AddWebReference}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.AddWebReferenceToProject"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/FileNode">
		<ComplexCondition>
			<Not>
				<Condition name = "Ownerstate" ownerstate = "Missing"/>
			</Not>
			<MenuItem id = "OpenFile"
			          label = "${res:ProjectComponent.ContextMenu.Open}"
			          icon  = "Icons.16x16.OpenFileIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowser"/>
			<MenuItem id      = "OpenFileWith"
			          label = "${res:Gui.ProjectBrowser.OpenWith}"
			          class   = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowserWith"/>
			<MenuItem id = "OpenFolderContainingFile"
			          label = "${res:OpenFileTabEventHandler.FileContainingFolderInExplorer}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFolderContainingFile"/>
		</ComplexCondition>
		<Condition name = "Ownerstate" ownerstate = "Missing">
			<MenuItem id = "Remove"
			          label = "${res:Global.RemoveButtonText}"
			          type = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
		</Condition>
		<ComplexCondition>
			<Not>
				<Condition name = "Ownerstate" ownerstate = "Missing"/>
			</Not>
			<MenuItem id = "OpenSeparator" type = "Separator" />
			
			<Condition name = "Ownerstate" ownerstate = "InProject">
				<MenuItem id = "Add" label = "${res:ProjectComponent.ContextMenu.AddMenu}" type="Menu">
					<Include path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/FolderNode/Add"/>
					<MenuItem id    = "AddDependentSeparator"
					          type  = "Separator" />
					<MenuItem id    = "NewDependentItem"
					          label = "${res:ProjectComponent.ContextMenu.NewDependentItem}"
					          icon  = "ProjectBrowser.CodeBehind"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.AddNewDependentItemsToProject"/>
					<MenuItem id    = "ExistingItemAsDependent"
					          label = "${res:ProjectComponent.ContextMenu.ExistingItemAsDependent}"
					          icon  = "ProjectBrowser.CodeBehind"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.AddExistingItemsToProjectAsDependent"/>
				</MenuItem>
				<MenuItem id = "AddSeparator" type = "Separator"  />
			</Condition>
			
			<ComplexCondition>
				<Or>
					<Condition name = "Ownerstate" ownerstate = "InProject"/>
					<Condition name = "Ownerstate" ownerstate = "None"/>
				</Or>
				<Condition name = "Ownerstate" ownerstate = "InProject">
					<MenuItem id    = "ExcludeFile"
					          label = "${res:ProjectComponent.ContextMenu.ExcludeFileFromProject}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.ExcludeFileFromProject"/>
					<MenuItem id     = "ExecuteCustomTool"
					          label  = "${res:ProjectComponent.ContextMenu.ExecuteCustomTool}"
					          class  = "ICSharpCode.SharpDevelop.Project.ExecuteCustomToolCommand"/>
				</Condition>
				
				<Condition name = "Ownerstate" ownerstate = "None">
					<MenuItem id    = "IncludeFile"
					          label = "${res:ProjectComponent.ContextMenu.IncludeFileInProject}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.IncludeFileInProject"/>
				</Condition>
				
				<MenuItem id = "ExcludeSeparator" type = "Separator" />
			</ComplexCondition>
			<Include id="CutCopyPasteDeleteRename" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutCopyPasteDeleteRename"/>
			<MenuItem id = "RenameSeparator" type = "Separator" />
			<MenuItem id    = "Properties"
			          icon  = "Icons.16x16.PropertiesIcon"
			          label = "${res:XML.MainMenu.FormatMenu.ShowProperties}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
		</ComplexCondition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutCopyRemoveRename">
		<MenuItem id = "Cut"
		          label = "${res:XML.MainMenu.EditMenu.Cut}"
		          type = "Item"
		          icon = "Icons.16x16.CutIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.CutProjectBrowserNode"/>
		<MenuItem id = "Copy"
		          label = "${res:XML.MainMenu.EditMenu.Copy}"
		          type = "Item"
		          icon = "Icons.16x16.CopyIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.CopyProjectBrowserNode"/>
		<MenuItem id = "Remove"
		          label = "${res:Global.RemoveButtonText}"
		          type = "Item"
		          icon  = "Icons.16x16.DeleteIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
		<MenuItem id = "Rename"
		          label    = "${res:ProjectComponent.ContextMenu.Rename}"
		          shortcut = "F2"
		          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutPasteRemoveRename">
		<MenuItem id = "Cut"
		          label = "${res:XML.MainMenu.EditMenu.Cut}"
		          type = "Item"
		          icon = "Icons.16x16.CutIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.CutProjectBrowserNode"/>
		<MenuItem id    = "Paste"
		          label = "${res:XML.MainMenu.EditMenu.Paste}"
		          type = "Item"
		          icon  = "Icons.16x16.PasteIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.PasteProjectBrowserNode"/>
		<MenuItem id = "Remove"
		          label = "${res:Global.RemoveButtonText}"
		          type = "Item"
		          icon  = "Icons.16x16.DeleteIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
		<MenuItem id = "Rename"
		          label    = "${res:ProjectComponent.ContextMenu.Rename}"
		          shortcut = "F2"
		          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutCopyPasteDeleteRename">
		<MenuItem id = "Cut"
		          label = "${res:XML.MainMenu.EditMenu.Cut}"
		          type = "Item"
		          icon = "Icons.16x16.CutIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.CutProjectBrowserNode"/>
		<MenuItem id = "Copy"
		          label = "${res:XML.MainMenu.EditMenu.Copy}"
		          type = "Item"
		          icon = "Icons.16x16.CopyIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.CopyProjectBrowserNode"/>
		<MenuItem id    = "Paste"
		          label = "${res:XML.MainMenu.EditMenu.Paste}"
		          type = "Item"
		          icon  = "Icons.16x16.PasteIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.PasteProjectBrowserNode"/>
		<MenuItem id = "Delete"
		          label = "${res:XML.MainMenu.EditMenu.Delete}"
		          type = "Item"
		          icon  = "Icons.16x16.DeleteIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
		<MenuItem id = "Rename"
		          label    = "${res:ProjectComponent.ContextMenu.Rename}"
		          shortcut = "F2"
		          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/FolderNode">
		<Condition name = "Ownerstate" ownerstate = "Missing">
			<MenuItem id = "CreateMissing"
			          label = "${res:ProjectComponent.ContextMenu.NewFolder}"
			          type  = "Item"
			          icon  = "Icons.16x16.NewFolderIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.CreateMissingCommand"/>
			<MenuItem id = "RemoveMissing"
			          label = "${res:Global.RemoveButtonText}"
			          type  = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ExcludeFileFromProject"/>
		</Condition>
		<ComplexCondition>
			<Not>
				<Condition name = "Ownerstate" ownerstate = "Missing"/>
			</Not>
			<MenuItem id = "Add" label = "${res:ProjectComponent.ContextMenu.AddMenu}" type="Menu">
				<MenuItem id    = "New Item"
				          label = "${res:ProjectComponent.ContextMenu.NewItem}"
				          icon  = "Icons.16x16.NewDocumentIcon"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddNewItemsToProject"/>
				<MenuItem id    = "Existing Item"
				          label = "${res:ProjectComponent.ContextMenu.ExistingItem}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddExistingItemsToProject"/>
				<MenuItem id    = "NewFolder"
				          label = "${res:ProjectComponent.ContextMenu.NewFolder}"
				          icon  = "Icons.16x16.NewFolderIcon"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddNewFolderToProject"/>
				<MenuItem id    = "ExistingFolder"
				          label = "${res:ProjectComponent.ContextMenu.ExistingFolder}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddExistingFolderToProject"/>
			</MenuItem>
			<MenuItem id = "AddSeparator" type = "Separator"  />
			<MenuItem id = "OpenFolder"
			          label = "${res:Gui.ProjectBrowser.OpenFolderInExplorer}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFolder"/>
			
			<ComplexCondition>
				<Or>
					<Condition name = "Ownerstate" ownerstate = "InProject"/>
					<Condition name = "Ownerstate" ownerstate = "None"/>
				</Or>
				<Condition name = "Ownerstate" ownerstate = "InProject">
					<MenuItem id    = "ExcludeFile"
					          label = "${res:ProjectComponent.ContextMenu.ExcludeFileFromProject}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.ExcludeFileFromProject"/>
				</Condition>
				
				<Condition name = "Ownerstate" ownerstate = "None">
					<MenuItem id    = "IncludeFile"
					          label = "${res:ProjectComponent.ContextMenu.IncludeFileInProject}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.IncludeFileInProject"/>
				</Condition>
				
				<MenuItem id = "ExcludeSeparator" type = "Separator" />
			</ComplexCondition>
			
			<Include id="CutCopyPasteDeleteRename" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutCopyPasteDeleteRename"/>
		</ComplexCondition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/WebReferencesFolderNode">
		<Condition name = "Ownerstate" ownerstate = "Missing">
			<MenuItem id = "RemoveMissing"
			          label = "${res:Global.RemoveButtonText}"
			          type  = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ExcludeFileFromProject"/>
		</Condition>
		<ComplexCondition>
			<Not>
				<Condition name = "Ownerstate" ownerstate = "Missing"/>
			</Not>
			<MenuItem id    = "AddWebReference"
			          label = "${res:ProjectComponent.ContextMenu.AddWebReference}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.AddWebReferenceToProject"/>
			<MenuItem id = "AddSeparator" type = "Separator"/>
			<MenuItem id = "Delete"
			          label = "${res:XML.MainMenu.EditMenu.Delete}"
			          type = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
			<MenuItem id = "Rename"
			          label    = "${res:ProjectComponent.ContextMenu.Rename}"
			          shortcut = "F2"
			          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
		</ComplexCondition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/WebReferenceNode">
		<Condition name = "Ownerstate" ownerstate = "Missing">
			<MenuItem id = "RemoveMissing"
			          label = "${res:Global.RemoveButtonText}"
			          type  = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ExcludeFileFromProject"/>
		</Condition>
		<ComplexCondition>
			<Not>
				<Condition name = "Ownerstate" ownerstate = "Missing"/>
			</Not>
			<MenuItem id = "Refresh"
			          label = "${res:ProjectComponent.ContextMenu.RefreshWebReference}"
			          type = "Item"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.RefreshWebReference"/>
			<MenuItem id = "RefreshSeparator" type = "Separator" />
			<MenuItem id = "Delete"
			          label = "${res:XML.MainMenu.EditMenu.Delete}"
			          type = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
			<MenuItem id = "Rename"
			          label    = "${res:ProjectComponent.ContextMenu.Rename}"
			          shortcut = "F2"
			          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
			<MenuItem id = "PropertiesSeparator" type = "Separator" />
			<MenuItem id = "Properties"
			          icon  = "Icons.16x16.PropertiesIcon"
			          label = "${res:XML.MainMenu.FormatMenu.ShowProperties}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
		</ComplexCondition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ReferenceNode">
		<MenuItem id    = "RefreshReference"
		          icon  = "Icons.16x16.BrowserRefresh"
		          label = "${res:AddIns.HtmlHelp2.Refresh}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.RefreshReference"/>
		<MenuItem id    = "Remove"
		          label = "${res:Global.RemoveButtonText}"
		          icon  = "Icons.16x16.DeleteIcon"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
		<MenuItem id = "RemoveSeparator" type = "Separator" />
		<MenuItem id    = "Properties"
		          icon  = "Icons.16x16.PropertiesIcon"
		          label = "${res:XML.MainMenu.FormatMenu.ShowProperties}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
	</Path>
	
	<!-- END Project Browser Paths-->
	
	<Path name = "/SharpDevelop/Pads/CompilerMessageView/Toolbar">
		<ToolbarItem id      = "CategorySelect"
		             type    = "ComboBox"
		             tooltip = "${res:MainWindow.Windows.CompilerMessageView.ShowOutputFromComboBox.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ShowOutputFromComboBox"/>
		
		<ToolbarItem id    = "CategorySelectSeparator" type  = "Separator"/>
		
		<ToolbarItem id      = "Clear"
		             icon    = "OutputPad.Toolbar.ClearOutputWindow"
		             tooltip = "${res:MainWindow.Windows.CompilerMessageView.ClearAllButton.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ClearOutputWindow"/>
		
		<ToolbarItem id      = "ToggleWordWrap"
		             type    = "CheckBox"
		             icon    = "OutputPad.Toolbar.ToggleWordWrap"
		             tooltip = "${res:MainWindow.Windows.CompilerMessageView.ToggleWordWrapButton.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ToggleMessageViewWordWrap"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/CompilerMessageView/ContextMenu">
		<Include id = "Copy" item = "/SharpDevelop/Workbench/MainMenu/Edit/Copy"/>
		<Include id = "SelectAll" item = "/SharpDevelop/Workbench/MainMenu/Edit/SelectAll"/>
		<MenuItem id    = "Clear"
		          icon  = "OutputPad.Toolbar.ClearOutputWindow"
		          label = "${res:MainWindow.Windows.CompilerMessageView.ClearAllButton.ToolTip}"
		          class = "ICSharpCode.SharpDevelop.Gui.ClearOutputWindow"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ErrorList/Toolbar">
		<ToolbarItem id      = "Errors"
		             type    = "CheckBox"
		             icon    = "Icons.16x16.Error"
		             label   = "${res:MainWindow.Windows.ErrorList.ErrorButton.Label}"
		             tooltip = "${res:MainWindow.Windows.ErrorList.ErrorButton.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ShowErrorsToggleButton"/>
		
		<ToolbarItem id    = "ErrorsSeparator" type  = "Separator"/>
		
		<ToolbarItem id    = "Warnings"
		             type  = "CheckBox"
		             icon  = "Icons.16x16.Warning"
		             label = "${res:MainWindow.Windows.ErrorList.WarningButton.Label}"
		             tooltip = "${res:MainWindow.Windows.ErrorList.WarningButton.ToolTip}"
		             class = "ICSharpCode.SharpDevelop.Gui.ShowWarningsToggleButton"/>
		<ToolbarItem id    = "WarningsSeparator" type  = "Separator"/>
		
		<ToolbarItem id    = "Messages"
		             type  = "CheckBox"
		             icon  = "Icons.16x16.Information"
		             label = "${res:MainWindow.Windows.ErrorList.MessageButton.Label}"
		             tooltip = "${res:MainWindow.Windows.ErrorList.MessageButton.ToolTip}"
		             class = "ICSharpCode.SharpDevelop.Gui.ShowMessagesToggleButton"/>
	</Path>
	
	<!-- ClassBrowser -->
	<Path name = "/SharpDevelop/Pads/ClassBrowser/Toolbar">
		<ToolbarItem id      = "Back"
		             icon    = "Icons.16x16.BrowserBefore"
		             tooltip = "${res:MainWindow.Windows.ClassBrowser.BackButton.ToolTip}"
		             loadclasslazy = "false"
		             class   = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ClassBrowserNavigateBackward"/>
		<ToolbarItem id      = "Forward"
		             icon    = "Icons.16x16.BrowserAfter"
		             tooltip = "${res:MainWindow.Windows.ClassBrowser.ForwardButton.ToolTip}"
		             loadclasslazy = "false"
		             class   = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ClassBrowserNavigateForward"/>
		
		<ToolbarItem id = "NavigationSeparator" type  = "Separator"/>
		<ToolbarItem id      = "SelectFilter"
		             type    = "DropDownButton"
		             icon    = "Icons.16x16.FindInFiles"
		             tooltip = "${res:MainWindow.Windows.ClassBrowser.ClassViewSettingsButton.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.SelectClassBrowserFilter">
			
			<MenuItem id    = "ShowProjectReferences"
			          type  = "CheckBox"
			          label = "${res:MainWindow.Windows.ClassBrowser.ClassViewSettings.ShowProjectReferences.Label}"
			          class = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ShowProjectReferences"/>
			<MenuItem id = "ReferenceSeparator" type = "Separator"  />
			<MenuItem id    = "ShowPublicMembers"
			          type  = "CheckBox"
			          label = "${res:MainWindow.Windows.ClassBrowser.ClassViewSettings.ShowPublicMembers.Label}"
			          class = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ShowPublicMembers"/>
			
			<MenuItem id    = "ShowPrivateMembers"
			          type  = "CheckBox"
			          label = "${res:MainWindow.Windows.ClassBrowser.ClassViewSettings.ShowPrivateMembers.Label}"
			          class = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ShowPrivateMembers"/>
			
			<MenuItem id    = "ShowProtectedMembers"
			          type  = "CheckBox"
			          label = "${res:MainWindow.Windows.ClassBrowser.ClassViewSettings.ShowProtectedMembers.Label}"
			          class = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ShowProtectedMembers"/>
			
			<MenuItem id    = "ShowOtherMembers"
			          type  = "CheckBox"
			          label = "${res:MainWindow.Windows.ClassBrowser.ClassViewSettings.ShowOtherMembers.Label}"
			          class = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ShowOtherMembers"/>
		</ToolbarItem>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ClassBrowser/Searchbar">
		<ToolbarItem id      = "Search"
		             type    = "ComboBox"
		             tooltip = "${res:MainWindow.Windows.ClassBrowser.SearchButton.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ClassBrowserSearchTerm"/>
		
		<ToolbarItem id      = "CommitSearch"
		             icon    = "Icons.16x16.FindIcon"
		             tooltip = "${res:MainWindow.Windows.ClassBrowser.CommitSearch.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ClassBrowserCommitSearch"/>
		
		<ToolbarItem id      = "CancelSearch"
		             icon    = "OutputPad.Toolbar.ClearOutputWindow"
		             tooltip = "${res:MainWindow.Windows.ClassBrowser.ClearSearch.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ClassBrowserCancelSearch"/>
	</Path>
	
	<!-- end ClassBrowser -->
	
	<!-- toolbars -->
	<Path name = "/SharpDevelop/Workbench/ToolBar/Standard">
		<ToolbarItem id      = "New"
		             icon    = "Icons.16x16.NewDocumentIcon"
		             tooltip = "${res:XML.MainMenu.FileMenu.New.File.Description}"
		             class   = "ICSharpCode.SharpDevelop.Commands.CreateNewFile"/>
		<ToolbarItem id      = "Open"
		             icon    = "Icons.16x16.OpenFileIcon"
		             tooltip = "${res:XML.MainMenu.FileMenu.Open.File.Description}"
		             class   = "ICSharpCode.SharpDevelop.Commands.OpenFile"/>
		
		<ToolbarItem id      = "OpenProject"
		             tooltip = "${res:XML.MainMenu.FileMenu.Open.Project.Description}"
		             icon    = "Icons.16x16.OpenProjectIcon"
		             class   = "ICSharpCode.SharpDevelop.Project.Commands.LoadSolution"
		/>
		
		<Condition name = "ActiveWindowState" windowstate="Dirty,Untitled" nowindowstate="ViewOnly" action="Disable">
			<ToolbarItem id      = "Save"
			             icon    = "Icons.16x16.SaveIcon"
			             tooltip = "${res:XML.MainMenu.FileMenu.Save.Description}"
			             class   = "ICSharpCode.SharpDevelop.Commands.SaveFile"/>
		</Condition>
		
		<Condition name = "OpenWindowState" openwindowstate="Dirty" action="Disable">
			<ToolbarItem id = "SaveAll"
			             icon = "Icons.16x16.SaveAllIcon"
			             tooltip = "${res:XML.MainMenu.FileMenu.SaveAll.Description}"
			             class = "ICSharpCode.SharpDevelop.Commands.SaveAllFiles"/>
		</Condition>
		
		<ToolbarItem id = "Separator1" type = "Separator"/>
		
		<ToolbarItem id = "Cut"
		             icon = "Icons.16x16.CutIcon"
		             tooltip = "${res:XML.MainMenu.EditMenu.Cut.Description}"
		             loadclasslazy = "false"
		             class = "ICSharpCode.SharpDevelop.Commands.Cut"/>
		<ToolbarItem id = "Copy"
		             icon = "Icons.16x16.CopyIcon"
		             tooltip = "${res:XML.MainMenu.EditMenu.Copy.Description}"
		             loadclasslazy = "false"
		             class = "ICSharpCode.SharpDevelop.Commands.Copy"/>
		<ToolbarItem id = "Paste"
		             icon = "Icons.16x16.PasteIcon"
		             tooltip = "${res:XML.MainMenu.EditMenu.Paste.Description}"
		             loadclasslazy = "false"
		             class = "ICSharpCode.SharpDevelop.Commands.Paste"/>
		<ToolbarItem id = "Delete"
		             icon = "Icons.16x16.DeleteIcon"
		             tooltip = "${res:XML.MainMenu.EditMenu.Delete.Description}"
		             loadclasslazy = "false"
		             class = "ICSharpCode.SharpDevelop.Commands.Delete"/>
		<ToolbarItem id = "UndoRedoSeparator"  type = "Separator"/>
		<ToolbarItem id      = "Undo"
		             icon    = "Icons.16x16.UndoIcon"
		             tooltip = "${res:XML.MainMenu.EditMenu.Undo.Description}"
		             loadclasslazy = "false"
		             class   = "ICSharpCode.SharpDevelop.Commands.Undo"/>
		<ToolbarItem id      = "Redo"
		             icon    = "Icons.16x16.RedoIcon"
		             tooltip = "${res:XML.MainMenu.EditMenu.Redo.Description}"
		             loadclasslazy = "false"
		             class   = "ICSharpCode.SharpDevelop.Commands.Redo"/>
		
		<ToolbarItem id = "CompileSeparator" type = "Separator"/>
		
		<ToolbarItem id      = "Compile"
		             icon    = "Icons.16x16.BuildCombine"
		             tooltip = "${res:XML.MainMenu.RunMenu.BuildSolution.Description}"
		             class   = "ICSharpCode.SharpDevelop.Project.Commands.Build"/>
		
		<ToolbarItem id      = "BuildProject"
		             icon    = "Icons.16x16.BuildCurrentSelectedProject"
		             tooltip = "${res:XML.MainMenu.RunMenu.BuildProject.Description}"
		             class   = "ICSharpCode.SharpDevelop.Project.Commands.BuildProject"/>
		
		<ToolbarItem id = "DebuggerSeparator" type = "Separator"  />
		
		<ComplexCondition>
			<Or>
				<Condition name="IsProcessRunning" isdebugging = "False"/>
				<Not>
					<Condition name="DebuggerSupports" debuggersupports = "ExecutionControl"/>
				</Not>
			</Or>
			<Condition name="IsProcessRunning" isdebugging = "False" action = "Disable">
				<Condition name = "SolutionOpen" action = "Disable">
					<Condition name="DebuggerSupports" debuggersupports = "Start">
						<ToolbarItem id      = "Run"
						             icon    = "Icons.16x16.RunProgramIcon"
						             tooltip = "${res:XML.MainMenu.RunMenu.Run.Description}"
						             class   = "ICSharpCode.SharpDevelop.Project.Commands.Execute"/>
					</Condition>
					
					<Condition name="DebuggerSupports" debuggersupports = "StartWithoutDebugging">
						<ToolbarItem id      = "RunWithoutDebugger"
						             icon    = "Icons.16x16.Debug.StartWithoutDebugging"
						             tooltip = "${res:XML.MainMenu.DebugMenu.RunWithoutDebug.Description}"
						             class   = "ICSharpCode.SharpDevelop.Project.Commands.ExecuteWithoutDebugger"/>
					</Condition>
				</Condition>
			</Condition>
		</ComplexCondition>
		
		<Condition name="IsProcessRunning" isdebugging = "True">
			<Condition name="DebuggerSupports" debuggersupports = "ExecutionControl">
				<Condition name="IsProcessRunning" isprocessrunning = "False" action = "Disable">
					<ToolbarItem id      = "Continue"
					             icon    = "Icons.16x16.Debug.Continue"
					             tooltip = "${res:XML.MainMenu.DebugMenu.Continue.Description}"
					             class   = "ICSharpCode.SharpDevelop.Project.Commands.ContinueDebuggingCommand"/>
				</Condition>
				<Condition name="IsProcessRunning" isprocessrunning = "True" action = "Disable">
					<ToolbarItem id      = "Break"
					             icon    = "Icons.16x16.Debug.Break"
					             tooltip = "${res:XML.MainMenu.DebugMenu.Break.Description}"
					             class   = "ICSharpCode.SharpDevelop.Project.Commands.BreakDebuggingCommand"/>
				</Condition>
			</Condition>
		</Condition>
		
		<Condition name="DebuggerSupports" debuggersupports = "Stop">
			<ComplexCondition action = "Disable">
				<Or>
					<Condition name="IsProcessRunning" isdebugging = "True"/>
					<Condition name="IsProcessRunning" isprocessrunning = "True"/>
				</Or>
				<ToolbarItem id = "Stop"
				             icon = "Icons.16x16.StopProcess"
				             tooltip = "${res:XML.MainMenu.DebugMenu.Stop.Description}"
				             class = "ICSharpCode.SharpDevelop.Project.Commands.StopDebuggingCommand"/>
			</ComplexCondition>
		</Condition>
		
		<Condition name="IsProcessRunning" isdebugging = "True">
			<Condition name="DebuggerSupports" debuggersupports = "Stepping">
				<Condition name="IsProcessRunning" isprocessrunning = "False" action = "Disable">
					<ToolbarItem id = "SteppingSeparator" type = "Separator"  />
					<ToolbarItem id      = "Step over"
					             icon    = "Icons.16x16.Debug.StepOver"
					             tooltip = "${res:XML.MainMenu.DebugMenu.StepOver.Description}"
					             class   = "ICSharpCode.SharpDevelop.Project.Commands.StepDebuggingCommand"/>
					<ToolbarItem id      = "Step into"
					             icon    = "Icons.16x16.Debug.StepInto"
					             tooltip = "${res:XML.MainMenu.DebugMenu.StepInto.Description}"
					             class   = "ICSharpCode.SharpDevelop.Project.Commands.StepIntoDebuggingCommand"/>
					<ToolbarItem id      = "Step out"
					             icon    = "Icons.16x16.Debug.StepOut"
					             tooltip = "${res:XML.MainMenu.DebugMenu.StepOut.Description}"
					             class   = "ICSharpCode.SharpDevelop.Project.Commands.StepOutDebuggingCommand"/>
				</Condition>
			</Condition>
		</Condition>
		
		<ToolbarItem id = "ChooseConfigurationSeparator" type = "Separator"/>
		
		<ToolbarItem id    = "ChooseLayout"
		             type  = "ComboBox"
		             class = "ICSharpCode.SharpDevelop.Commands.ChooseLayoutCommand" />
		
		<ToolbarItem id="NavigationSeparator" type="Separator"/>
		<Condition name="CanNavigateBack" action="Disable">
			<ToolbarItem id="NavigateBack"
			             type="SplitButton"
			             icon="Icons.16x16.NavigateBack"
			             tooltip="${res:XML.MainMenu.Navigation.Back}"
			             disabledIcon="Icons.16x16.NavigateBack"
			             loadclasslazy="false"
			             class="ICSharpCode.SharpDevelop.Commands.NavigateBack"
			>
				<MenuItem id="NavigationHistoryBuilder"
				          type="Builder"
				          class="ICSharpCode.SharpDevelop.Commands.NavigationHistoryMenuBuilder"/>
			</ToolbarItem>
		</Condition>
		<Condition name="CanNavigateForward" action="Disable">
			<ToolbarItem id="NavigateForward"
			             icon="Icons.16x16.NavigateForward"
			             tooltip="${res:XML.MainMenu.Navigation.Forward}"
			             loadclasslazy="false"
			             class="ICSharpCode.SharpDevelop.Commands.NavigateForward"/>
		</Condition>
	</Path>
	<!-- end toolbars -->
	
	<Path name = "/SharpDevelop/Workbench/OpenFileTab/ContextMenu">
		<MenuItem id = "Close"
		          label = "${res:OpenFileTabEventHandler.ContextMenu.Close}"
		          icon  = "Icons.16x16.CloseFileIcon"
		          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.CloseFileTab"/>
		<MenuItem id    = "CloseAll"
		          icon  = "Icons.16x16.CloseAllDocuments"
		          label = "${res:XML.MainMenu.FileMenu.CloseAll}"
		          class = "ICSharpCode.SharpDevelop.Commands.CloseAllWindows" />
		<MenuItem id    = "CloseAllButThis"
		          label = "${res:OpenFileTabEventHandler.ContextMenu.CloseAllButThis}"
		          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.CloseAllButThisFileTab" />
		
		<MenuItem id = "CloseSeparator" type = "Separator" />
		<ComplexCondition action="Disable">
			<And>
				<Condition name = "Ownerstate" ownerstate="FileDirty"/>
				<Not>
					<Condition name = "Ownerstate" ownerstate="FileUntitled"/>
				</Not>
			</And>
			
			<MenuItem id = "Save"
			          label = "${res:OpenFileTabEventHandler.ContextMenu.Save}"
			          icon  = "Icons.16x16.SaveIcon"
			          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.SaveFileTab"/>
		</ComplexCondition>
		<MenuItem id = "SaveAs"
		          label = "${res:OpenFileTabEventHandler.ContextMenu.SaveAs}"
		          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.SaveFileAsTab"/>
		<Condition name = "OpenWindowState" openwindowstate="Dirty" action="Disable">
			<MenuItem id = "SaveAll"
			          icon = "Icons.16x16.SaveAllIcon"
			          label = "${res:XML.MainMenu.FileMenu.SaveAll.Description}"
			          class = "ICSharpCode.SharpDevelop.Commands.SaveAllFiles"/>
		</Condition>
		<MenuItem id = "SaveSeparator" type = "Separator" />
		<ComplexCondition action="Disable">
			<Not>
				<Condition name = "Ownerstate" ownerstate="FileUntitled" />
			</Not>
			<MenuItem id = "CopyPathName"
			          label = "${res:OpenFileTabEventHandler.CopyPathName}"
			          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.CopyPathName"/>
			<MenuItem id = "OpenFolderContainingFileFromTab"
			          label = "${res:OpenFileTabEventHandler.FileContainingFolderInExplorer}"
			          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.OpenFolderContainingFile"/>
		</ComplexCondition>
	</Path>
	
	<Path name = "/SharpDevelop/Views/PropertyPad/ContextMenu">
		<MenuItem id    = "ResetProperty"
		          label = "${res:ICSharpCode.SharpDevelop.Gui.Pads.PropertyPad.ContextMenu.Reset}"
		          class = "ICSharpCode.SharpDevelop.Gui.PropertyPadResetCommand"/>
		<MenuItem id = "Separator"  type = "Separator" />
		<MenuItem id    = "ShowDescription"
		          label = "${res:ICSharpCode.SharpDevelop.Gui.Pads.PropertyPad.ContextMenu.ShowDescription}"
		          class = "ICSharpCode.SharpDevelop.Gui.PropertyPadShowDescriptionCommand"/>
	</Path>
	
	<Path name = "/SharpDevelop/Dialogs/OptionsDialog">
		<DialogPanel id    = "UIOptions"
		             label = "${res:Dialog.Options.TreeViewOptions.SharpDevelopOptionsText}">
			<DialogPanel id    = "SelectCulture"
			             label = "${res:Dialog.Options.IDEOptions.SelectCulture.PanelName}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.IDEOptionPanel"/>
			<DialogPanel id    = "SelectStyle"
			             label = "${res:Dialog.Options.IDEOptions.SelectVisualStyle.PanelName}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.SelectStylePanel"/>
			<DialogPanel id    = "Fullscreen"
			             label = "${res:Dialog.Options.IDEOptions.FullScreen.Title}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.FullscreenPanel"/>
			<DialogPanel id    = "LoadSave"
			             label = "${res:Dialog.Options.IDEOptions.LoadSaveOptions.PanelName}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.LoadSavePanel"/>
			<DialogPanel id    = "TaskListOptions"
			             label = "${res:Dialog.Options.IDEOptions.TaskListOptions.PanelName}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.TaskListOptions"/>
			<DialogPanel id    = "OutputWindowOptions"
			             label = "${res:Dialog.Options.IDEOptions.OutputPanel.Title}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.OutputWindowOptionsPanel"/>
			<DialogPanel id    = "ProjectAndSolutionOptions"
			             label = "${res:Dialog.Options.IDEOptions.ProjectAndSolutionOptions.PanelName}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.ProjectAndSolutionOptionsPanel"/>
		</DialogPanel>
		<DialogPanel id    = "CodingOptions"
		             label = "${res:Dialog.Options.IDEOptions.CodingOptionsText}">
			<DialogPanel id    = "CodeGeneration"
			             label = "${res:Dialog.Options.IDEOptions.CodeGenerationOptionsPanel.Title}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.CodeGenerationPanel"/>
			<DialogPanel id    = "EditStandardHeaderPanel"
			             label = "${res:Dialog.Options.IDEOptions.EditStandardHeaderPanel.Title}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.EditStandardHeaderPanel"/>
		</DialogPanel>
		
		<DialogPanel id    = "ToolsOptions"
		             label = "${res:Dialog.Options.IDEOptions.ToolsOptionsText}">
			<DialogPanel id    = "ExternalTools"
			             label = "${res:Dialog.Options.ExternalToolsText}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.ExternalToolPane"/>
		</DialogPanel>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/SharpDevelopSideBar/ContextMenu">
		<Condition name = "Ownerstate" ownerstate = "TabCanBeDeleted" action="Disable">
			<MenuItem id     = "DeleteTab"
			          label = "${res:SideBarComponent.ContextMenu.DeleteTab}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarDeleteTabHeader"/>
		</Condition>
		
		<Condition name = "Ownerstate" ownerstate="CanBeRenamed" action="Disable">
			<MenuItem id    = "RenameTab"
			          label = "${res:SideBarComponent.ContextMenu.RenameTab}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarRenameTabHeader"/>
		</Condition>
		
		<MenuItem id = "Separator1" type = "Separator" />
		<MenuItem id    = "AddTab"
		          label = "${res:SideBarComponent.ContextMenu.AddTab}"
		          class = "ICSharpCode.SharpDevelop.Commands.SideBarAddTabHeader"/>
		
		<MenuItem id = "Separator2" type = "Separator" />
		<Condition name = "Ownerstate" ownerstate="CanMoveUp" action="Disable">
			<MenuItem id    = "MoveTabUp"
			          label = "${res:SideBarComponent.ContextMenu.MoveTabUp}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarMoveTabUp"/>
		</Condition>
		
		<Condition name = "Ownerstate" ownerstate="CanMoveDown" action="Disable">
			<MenuItem id    = "MoveTabDown"
			          label = "${res:SideBarComponent.ContextMenu.MoveTabDown}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarMoveTabDown"/>
		</Condition>
		
		<Include id="CommonContextMenu" path="/SharpDevelop/Workbench/SharpDevelopSideBar/CommonContextMenu"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/SharpDevelopSideBar/SideTab/ContextMenu">
		<Condition name = "Ownerstate" ownerstate="TabCanBeDeleted" action="Disable">
			<MenuItem id = "DeleteTabItem"
			          label = "${res:SideBarComponent.ContextMenu.DeleteTabItem}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarDeleteTabItem"/>
		</Condition>
		
		<Condition name = "Ownerstate" ownerstate="CanBeRenamed" action="Disable">
			<MenuItem id = "RenameTabItem"
			          label = "${res:SideBarComponent.ContextMenu.RenameTabItem}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarRenameTabItem" />
		</Condition>
		
		<MenuItem id = "Separator1" type = "Separator" />
		<Condition name = "Ownerstate" ownerstate="CanMoveItemUp" action="Disable">
			<MenuItem id = "MoveItemUp"
			          label = "${res:SideBarComponent.ContextMenu.MoveTabItemUp}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarMoveActiveItemUp"/>
		</Condition>
		
		<Condition name = "Ownerstate" ownerstate="CanMoveItemDown" action="Disable">
			<MenuItem id = "MoveItemDown"
			          label = "${res:SideBarComponent.ContextMenu.MoveTabItemDown}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarMoveActiveItemDown"/>
		</Condition>
		
		<Include id="CommonContextMenu" path="/SharpDevelop/Workbench/SharpDevelopSideBar/CommonContextMenu"/>
	</Path>
	
	<!-- Main Menu -->
	<Path name = "/SharpDevelop/Workbench/MainMenu">
		<MenuItem id = "File" label    = "${res:XML.MainMenu.FileMenu}" type="Menu">
			<MenuItem id = "New" label = "${res:XML.MainMenu.FileMenu.New}" type="Menu">
				<MenuItem id           = "File"
				          label        = "${res:XML.MainMenu.FileMenu.New.File}"
				          icon         = "Icons.16x16.NewDocumentIcon"
				          shortcut     = "Control|N"
				          class        = "ICSharpCode.SharpDevelop.Commands.CreateNewFile"/>
				
				<MenuItem id          = "Project"
				          label       = "${res:XML.MainMenu.FileMenu.New.Project}"
				          icon        = "Icons.16x16.NewProjectIcon"
				          shortcut    = "Control|Shift|N"
				          class       = "ICSharpCode.SharpDevelop.Project.Commands.CreateNewSolution"/>
			</MenuItem>
			
			
			<MenuItem id = "Open" label = "${res:XML.MainMenu.FileMenu.Open}" type="Menu">
				<MenuItem id          = "File"
				          label       = "${res:XML.MainMenu.FileMenu.Open.File}"
				          icon        = "Icons.16x16.OpenFileIcon"
				          shortcut    = "Control|O"
				          class       = "ICSharpCode.SharpDevelop.Commands.OpenFile"/>
				
				<MenuItem id = "Project"
				          label = "${res:XML.MainMenu.FileMenu.Open.Project}"
				          icon = "Icons.16x16.OpenProjectIcon"
				          shortcut = "Control|Shift|O"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.LoadSolution"/>
			</MenuItem>
			
			<MenuItem id = "Close" label = "${res:XML.MainMenu.FileMenu.Close}" type="Menu">
				<Condition name = "WindowActive" activewindow="*" action="Disable">
					<MenuItem id = "CloseFile"
					          label = "${res:XML.MainMenu.FileMenu.Close.File}"
					          icon  = "Icons.16x16.CloseFileIcon"
					          shortcut = "Control|F4"
					          class ="ICSharpCode.SharpDevelop.Commands.CloseFile"/>
				</Condition>
				<Condition name = "SolutionOpen" action="Disable">
					<MenuItem id = "CloseCombine"
					          label = "${res:XML.MainMenu.FileMenu.Close.Project}"
					          shortcut = "Control|Shift|F4"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.CloseSolution"/>
				</Condition>
			</MenuItem>
			
			<MenuItem id = "ReloadSeparator" type = "Separator"  />
			<Condition name = "WindowActive" activewindow="*" action="Disable">
				<MenuItem id = "Reloadfile"
				          label = "${res:XML.MainMenu.FileMenu.Reload}"
				          shortcut = "Shift|Control|U"
				          class = "ICSharpCode.SharpDevelop.Commands.ReloadFile" />
			</Condition>
			
			<MenuItem id = "SaveSeparator" type = "Separator"  />
			
			<Condition name = "ActiveWindowState" windowstate="Dirty, Untitled" nowindowstate="ViewOnly" action="Disable">
				<MenuItem id = "Save"
				          label = "${res:XML.MainMenu.FileMenu.Save}"
				          icon = "Icons.16x16.SaveIcon"
				          shortcut = "Control|S"
				          class = "ICSharpCode.SharpDevelop.Commands.SaveFile"/>
			</Condition>
			
			<Condition name = "ActiveWindowState" windowstate="None" nowindowstate="ViewOnly" action="Disable">
				<MenuItem id = "SaveAs"
				          label = "${res:XML.MainMenu.FileMenu.SaveAs}"
				          class = "ICSharpCode.SharpDevelop.Commands.SaveFileAs"/>
			</Condition>
			
			<Condition name = "OpenWindowState" openwindowstate="Dirty" action="Disable">
				<MenuItem id = "SaveAll"
				          label = "${res:XML.MainMenu.FileMenu.SaveAll}"
				          icon = "Icons.16x16.SaveAllIcon"
				          shortcut = "Control|Shift|S"
				          class = "ICSharpCode.SharpDevelop.Commands.SaveAllFiles"/>
			</Condition>
			
			<MenuItem id = "PrintSeparator" type = "Separator"  />
			<Condition name = "WindowActive" activewindow="*" action="Disable">
				<MenuItem id = "Print"
				          label = "${res:XML.MainMenu.FileMenu.Print}"
				          icon = "Icons.16x16.Print"
				          shortcut = "Control|P"
				          class = "ICSharpCode.SharpDevelop.Commands.Print"/>
				<MenuItem id = "PrintPreview"
				          label = "${res:XML.MainMenu.FileMenu.PrintPreview}"
				          icon = "Icons.16x16.PreView"
				          class = "ICSharpCode.SharpDevelop.Commands.PrintPreview"/>
			</Condition>
			
			<MenuItem id = "RecentSeparator" type = "Separator"  />
			<MenuItem id = "RecentFiles"    attribute = "RecentFiles" label = "${res:XML.MainMenu.FileMenu.RecentFiles}" type="Menu">
				<MenuItem id = "RecentFilesBuilder" type = "Builder" class = "ICSharpCode.SharpDevelop.Commands.RecentFilesMenuBuilder" />
				<MenuItem id = "RecentFilesSeparator" type = "Separator"  />
				<MenuItem id = "ClearRecentFiles"
				          label = "${res:XML.MainMenu.FileMenu.ClearRecentFiles}"
				          class = "ICSharpCode.SharpDevelop.Commands.ClearRecentFiles" />
			</MenuItem>
			
			<MenuItem id = "RecentProjects" attribute = "RecentProjects" label = "${res:XML.MainMenu.FileMenu.RecentProjects}" type="Menu">
				<MenuItem id = "RecentProjectsBuilder" type = "Builder" class = "ICSharpCode.SharpDevelop.Commands.RecentProjectsMenuBuilder" />
				<MenuItem id = "RecentProjectsSeparator" type = "Separator"  />
				<MenuItem id = "ClearRecentFiles"
				          label = "${res:XML.MainMenu.FileMenu.ClearRecentProjects}"
				          class = "ICSharpCode.SharpDevelop.Commands.ClearRecentProjects" />
			</MenuItem>
			
			<MenuItem id = "ExitSC:eparator" type = "Separator"  />
			<MenuItem id = "Exit"
			          label = "${res:XML.MainMenu.FileMenu.Exit}"
			          icon = "Icons.16x16.CancelIcon"
			          class = "ICSharpCode.SharpDevelop.Commands.ExitWorkbenchCommand" />
		</MenuItem> <!-- END File menu -->
		
		<MenuItem id = "Edit" label = "${res:XML.MainMenu.EditMenu}" type="Menu">
			<MenuItem id = "Undo"
			          label = "${res:XML.MainMenu.EditMenu.Undo}"
			          icon = "Icons.16x16.UndoIcon"
			          type = "Item"
			          shortcut = "Control|Z"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.Undo"/>
			<MenuItem id = "Redo"
			          label = "${res:XML.MainMenu.EditMenu.Redo}"
			          icon = "Icons.16x16.RedoIcon"
			          type = "Item"
			          shortcut = "Control|Y"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.Redo"/>
			<MenuItem id = "Separator1" type = "Separator"  />
			<MenuItem id = "Cut"
			          label = "${res:XML.MainMenu.EditMenu.Cut}"
			          icon = "Icons.16x16.CutIcon"
			          type = "Item"
			          shortcut = "Control|X"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.Cut"/>
			<MenuItem id = "Copy"
			          label = "${res:XML.MainMenu.EditMenu.Copy}"
			          icon = "Icons.16x16.CopyIcon"
			          type = "Item"
			          shortcut = "Control|C"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.Copy"/>
			<MenuItem id = "Paste"
			          label = "${res:XML.MainMenu.EditMenu.Paste}"
			          icon = "Icons.16x16.PasteIcon"
			          type = "Item"
			          shortcut = "Control|V"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.Paste"/>
			<MenuItem id = "Delete"
			          label = "${res:XML.MainMenu.EditMenu.Delete}"
			          icon = "Icons.16x16.DeleteIcon"
			          type = "Item"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.Delete"/>
			<MenuItem id = "Separator2" type = "Separator"  />
			<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.ITextEditorControlProvider" action="Disable">
				<MenuItem id = "Insert" label = "${res:XML.MainMenu.EditMenu.Insert}" type="Menu">
					<MenuItem id = "PasteAsComment"
					          label = "${res:XML.MainMenu.EditMenu.Paste.AsComment}"
					          class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.PasteAsCommentCommand"/>
					<MenuItem id = "PasteAsString"
					          label = "${res:XML.MainMenu.EditMenu.Paste.AsString}"
					          class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.PasteAsStringCommand"/>
					
					<MenuItem id="Separator1" type="Separator"/>
					
					<MenuItem id = "InsertColor"
					          label = "${res:XML.MainMenu.ToolMenu.InsColor}"
					          class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.ShowColorDialog"/>
					<MenuItem id       = "InsertGuid"
					          shortcut = "Control|Shift|G"
					          label    = "${res:XML.MainMenu.ToolMenu.InsGUID}"
					          class    = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.InsertGuidCommand"/>
				</MenuItem>
			</Condition>
			<MenuItem id = "SelectAll"
			          label = "${res:XML.MainMenu.EditMenu.SelectAll}"
			          type = "Item"
			          shortcut = "Control|A"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.SelectAll"/>
			<MenuItem id = "Separator4" type = "Separator"  />
			<ComplexCondition action="Disable">
				<Or>
					<Condition name = "WindowActive" activewindow="*"/>
					<Condition name = "SolutionOpen"/>
				</Or>
				<MenuItem id = "WordCount"
				          label = "${res:XML.MainMenu.EditMenu.WordCount}"
				          class = "ICSharpCode.SharpDevelop.Commands.WordCount"/>
			</ComplexCondition>
		</MenuItem> <!-- end EDIT menu -->
		
		<MenuItem id = "View" label = "${res:XML.MainMenu.ViewMenu}" type="Menu">
			<MenuItem id    = "MainViewMenuBuilder"
			          type  = "Builder"
			          class = "ICSharpCode.SharpDevelop.Commands.MainViewMenuBuilder" />
			
			<MenuItem id = "Tools" label = "${res:XML.MainMenu.ViewMenu.ToolsMenu}" type="Menu">
				<MenuItem id    = "ToolsViewMenuBuilder"
				          type  = "Builder"
				          class = "ICSharpCode.SharpDevelop.Commands.ToolsViewMenuBuilder" />
			</MenuItem>
			
			<MenuItem id = "ViewItemsSeparator" type = "Separator" />
			<MenuItem id = "FullScreen"
			          label         = "${res:XML.MainMenu.ViewMenu.FullScreen}"
			          icon        = "Icons.16x16.FullScreen"
			          class       = "ICSharpCode.SharpDevelop.Commands.ToggleFullscreenCommand" />
		</MenuItem> <!-- end VIEW menu -->
		
		<Condition name="RefactoringProviderSupports" supports="*">
			<MenuItem id = "Refactor" label = "${res:XML.MainMenu.RefactorMenu}" type="Menu">
				<MenuItem id    = "Rename"
				          label = "${res:SharpDevelop.Refactoring.RenameCommand}"
				          class = "ICSharpCode.SharpDevelop.Refactoring.RenameCommand" />
				<Condition name="RefactoringProviderSupports" supports="FindUnusedUsingDeclarations">
					<MenuItem id    = "RemoveUnusedUsings"
					          label = "${res:SharpDevelop.Refactoring.RemoveUnusedImports}"
					          class = "ICSharpCode.SharpDevelop.Refactoring.RemoveUnusedUsingsCommand" />
				</Condition>
			</MenuItem>
		</Condition> <!-- end REFACTOR menu -->
		
		<Condition name = "ProjectActive" activeproject="*">
			<MenuItem id = "Project" label = "${res:XML.MainMenu.ProjectMenu}" type="Menu">
				<MenuItem id = "ProjectAddMenu" label = "${res:ProjectComponent.ContextMenu.AddMenu}" type = "Menu" >
					<Include path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/FolderNode/Add"/>
				</MenuItem>
				<MenuItem id    = "AddReference"
				          label = "${res:ProjectComponent.ContextMenu.AddReference}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddReferenceToProject"/>
				<MenuItem id    = "AddWebReference"
				          label = "${res:ProjectComponent.ContextMenu.AddWebReference}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddWebReferenceToProject"/>
				<MenuItem id = "AddSeparator" type = "Separator"/>
				<Include id = "ProjectActions" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ProjectActions"/>
				<MenuItem id = "Separator2" type = "Separator" />
				<MenuItem id = "Options"
				          label = "${res:XML.MainMenu.ProjectMenu.Options}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.ViewProjectOptions"/>
			</MenuItem>
		</Condition> <!-- end PROJECT menu -->
		
		<MenuItem id = "Build" label = "${res:XML.MainMenu.BuildMenu}" type="Menu">
			<ComplexCondition action="Disable">
				<Or>
					<!--<And>
						<Or>
							<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.ITextEditorControlProvider"/>
							<Condition name = "WindowActive" activewindow="ICSharpCode.FormsDesigner.FormsDesignerViewContent"/>
						</Or>
						<Condition name = "ActiveViewContentUntitled" activewindowuntitled="False"/>
					</And>-->
					<Condition name = "SolutionOpen"/>
				</Or>
				<MenuItem id       = "Build"
				          label    = "${res:XML.MainMenu.BuildMenu.BuildSolution}"
				          shortcut = "F8"
				          icon     = "Icons.16x16.BuildCombine"
				          class    = "ICSharpCode.SharpDevelop.Project.Commands.Build"/>
				<MenuItem id       = "Rebuild"
				          label    = "${res:XML.MainMenu.BuildMenu.RebuildSolution}"
				          shortcut = "Alt|F8"
				          class    = "ICSharpCode.SharpDevelop.Project.Commands.Rebuild"/>
				<MenuItem id    = "Clean"
				          label = "${res:XML.MainMenu.BuildMenu.CleanSolution}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.Clean"/>
				<Condition name = "ProjectActive" activeproject="*">
					<MenuItem id = "Separator1" type = "Separator" />
					<MenuItem id       = "Build project"
					          label    = "${res:XML.MainMenu.BuildMenu.BuildProject}"
					          shortcut = "F9"
					          icon     = "Icons.16x16.BuildCurrentSelectedProject"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.BuildProject"/>
					<MenuItem id       = "Rebuild project"
					          label    = "${res:XML.MainMenu.BuildMenu.RebuildProject}"
					          shortcut = "Alt|F9"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.RebuildProject"/>
					<MenuItem id    = "Clean project"
					          label = "${res:XML.MainMenu.BuildMenu.CleanProject}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.CleanProject"/>
					<!--<MenuItem id    = "Publish project"
					          label = "${res:XML.MainMenu.BuildMenu.PublishProject}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.PublishProject"/>-->
				</Condition>
				<MenuItem id = "Separator2" type = "Separator" />
				<MenuItem id="AbortBuild" type="Builder" class="ICSharpCode.SharpDevelop.Project.Commands.AbortBuild"/>
				<MenuItem id = "Separator3" type = "Separator" />
				<MenuItem id = "SetConfiguration"
				          label = "${res:XML.MainMenu.BuildMenu.SetConfiguration}"
				          type = "Menu">
					<MenuItem id = "ConfigurationBuilder" type = "Builder" class = "ICSharpCode.SharpDevelop.Project.Commands.SetConfigurationMenuBuilder"/>
				</MenuItem>
				<MenuItem id = "SetPlatform"
				          label = "${res:XML.MainMenu.BuildMenu.SetPlatform}"
				          type = "Menu">
					<MenuItem id = "PlatformBuilder" type = "Builder" class = "ICSharpCode.SharpDevelop.Project.Commands.SetPlatformMenuBuilder"/>
				</MenuItem>
				<MenuItem id = "EditConfigurations"
				          label = "${res:XML.MainMenu.BuildMenu.EditConfigurationsPlatforms}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.EditConfigurationsCommand"/>
			</ComplexCondition>
		</MenuItem> <!-- end BUILD menu -->
		
		<MenuItem id = "Debug" label = "${res:XML.MainMenu.DebugMenu}" type="Menu">
			<Condition name="DebuggerSupports" debuggersupports = "Start">
				<Condition name = "SolutionOpen" action="Disable">
					<Condition name="IsProcessRunning" isdebugging="False" action="Disable">
						<MenuItem id       = "Run"
						          label    = "${res:XML.MainMenu.RunMenu.Run}"
						          icon     = "Icons.16x16.RunProgramIcon"
						          shortcut = "F5"
						          class    = "ICSharpCode.SharpDevelop.Project.Commands.Execute"/>
					</Condition>
				</Condition>
			</Condition>
			
			<Condition name="DebuggerSupports" debuggersupports = "StartWithoutDebugging">
				<Condition name = "SolutionOpen" action="Disable">
					<Condition name="IsProcessRunning" isdebugging="False" action="Disable">
						<MenuItem id       = "RunWithoutDebugger"
						          label    = "${res:XML.MainMenu.DebugMenu.RunWithoutDebug}"
						          icon     = "Icons.16x16.Debug.StartWithoutDebugging"
						          shortcut = "Control|F5"
						          class    = "ICSharpCode.SharpDevelop.Project.Commands.ExecuteWithoutDebugger"/>
					</Condition>
				</Condition>
			</Condition>
			
			<Condition name="DebuggerSupports" debuggersupports = "Stop">
				<Condition name="IsProcessRunning" isdebugging="True" action="Disable">
					<MenuItem id    = "Stop"
					          label = "${res:XML.MainMenu.DebugMenu.Stop}"
					          icon  = "Icons.16x16.StopProcess"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.StopDebuggingCommand"/>
				</Condition>
			</Condition>
			
			<Condition name="DebuggerSupports" debuggersupports="Attaching">
				<Condition name="IsProcessRunning" isprocessrunning="False" isdebugging="False" action="Disable">
					<MenuItem id    = "Attach"
					          label = "${res:XML.MainMenu.DebugMenu.Attach}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.AttachToProcessCommand"/>
				</Condition>
			</Condition>
			
			<Condition name="DebuggerSupports" debuggersupports="Detaching">
				<Condition name="IsProcessRunning" isdebugging="True" action="Disable">
					<MenuItem id    = "Detach"
					          label = "${res:XML.MainMenu.DebugMenu.Detach}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.DetachFromProcessCommand"/>
				</Condition>
			</Condition>
			
			<Condition name="DebuggerSupports" debuggersupports = "ExecutionControl">
				<MenuItem id = "ExecutionControlSeparator" type = "Separator" />
				<Condition name="IsProcessRunning" isprocessrunning = "True" isdebugging = "True" action = "Disable">
					<MenuItem id       = "Break"
					          label    = "${res:XML.MainMenu.DebugMenu.Break}"
					          icon     = "Icons.16x16.Debug.Break"
					          shortcut = "Control|Alt|B"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.BreakDebuggingCommand"/>
				</Condition>
				<Condition name="IsProcessRunning" isprocessrunning = "False" isdebugging = "True" action = "Disable">
					<MenuItem id       = "Continue"
					          label    = "${res:XML.MainMenu.DebugMenu.Continue}"
					          icon     = "Icons.16x16.Debug.Continue"
					          shortcut = "F6"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.ContinueDebuggingCommand"/>
				</Condition>
			</Condition>
			
			<Condition name="DebuggerSupports" debuggersupports = "Stepping">
				<Condition name="IsProcessRunning"  isprocessrunning = "False" isdebugging = "True" action = "Disable">
					<MenuItem id = "BeforeSteppingSeparator" type = "Separator" />
					<MenuItem id       = "Step over"
					          label    = "${res:XML.MainMenu.DebugMenu.StepOver}"
					          icon     = "Icons.16x16.Debug.StepOver"
					          shortcut = "F10"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.StepDebuggingCommand"/>
					<MenuItem id       = "Step into"
					          label    = "${res:XML.MainMenu.DebugMenu.StepInto}"
					          icon     = "Icons.16x16.Debug.StepInto"
					          shortcut = "F11"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.StepIntoDebuggingCommand"/>
					<MenuItem id       = "Step out"
					          label    = "${res:XML.MainMenu.DebugMenu.StepOut}"
					          icon     = "Icons.16x16.Debug.StepOut"
					          shortcut = "Shift|F11"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.StepOutDebuggingCommand"/>
				</Condition>
			</Condition>
			
			<MenuItem id = "ToggleBreakpointSeparator" type = "Separator" />
			<ComplexCondition action="Disable">
				<And>
					<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.ITextEditorControlProvider"/>
					<Condition name = "ActiveViewContentUntitled" activewindowuntitled="False"/>
				</And>
				<MenuItem id       = "Toggle Breakpoint"
				          label    = "${res:XML.MainMenu.DebugMenu.ToggleBreakpoint}"
				          shortcut = "F7"
				          class    = "ICSharpCode.SharpDevelop.Project.Commands.ToggleBreakpointCommand"/>
			</ComplexCondition>
		</MenuItem> <!-- end DEBUG menu -->
		
		<MenuItem id = "Search" label = "${res:XML.MainMenu.SearchMenu}" type="Menu">
			<MenuItem id = "SearchIncremental"
			          label = "${res:XML.MainMenu.SearchMenu.IncrementalSearch}"
			          shortcut = "Control|E"
			          class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.RunIncrementalSearch"/>
			<MenuItem id = "SearchReverseIncremental"
			          label = "${res:XML.MainMenu.SearchMenu.ReverseIncrementalSearch}"
			          shortcut = "Control|Shift|E"
			          class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.RunReverseIncrementalSearch"/>
			<MenuItem id = "SearchInFilesSeparator" type = "Separator" />
			<!--			<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.ITextEditorControlProvider" action="Disable"> -->
			<MenuItem id = "ToggleBookmark"
			          label = "${res:XML.MainMenu.SearchMenu.ToggleBookmark}"
			          shortcut = "Control|F2"
			          icon = "Bookmarks.ToggleMark"
			          class = "ICSharpCode.SharpDevelop.Bookmarks.ToggleBookmark"/>
			<MenuItem id = "PrevBookmark"
			          label = "${res:XML.MainMenu.SearchMenu.PrevBookmark}"
			          shortcut = "Alt|F2"
			          icon = "Bookmarks.GotoPrevInFile"
			          class = "ICSharpCode.SharpDevelop.Bookmarks.PrevBookmark"/>
			<MenuItem id = "NextBookmark"
			          label = "${res:XML.MainMenu.SearchMenu.NextBookmark}"
			          shortcut = "F2"
			          icon = "Bookmarks.GotoNextInFile"
			          class = "ICSharpCode.SharpDevelop.Bookmarks.NextBookmark"/>
			<MenuItem id = "ClearBookmarks"
			          label = "${res:XML.MainMenu.SearchMenu.ClrBookmark}"
			          icon = "Bookmarks.ClearAll"
			          class = "ICSharpCode.SharpDevelop.Bookmarks.ClearBookmarks"/>
			<MenuItem id = "Separator2" type = "Separator" />
			<MenuItem id = "GotoLineNr"
			          label = "${res:XML.MainMenu.SearchMenu.Goto}"
			          shortcut = "Control|G"
			          class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.GotoLineNumber"/>
			<MenuItem id = "Separator3" type = "Separator" />
			<MenuItem id = "GotoBrace"
			          label = "${res:XML.MainMenu.SearchMenu.GotoBrace}"
			          shortcut = "Control|B"
			          class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.GotoMatchingBrace"/>
			<!--			</Condition> -->
		</MenuItem>
		
		<MenuItem id="Analysis" label="${res:XML.MainMenu.Analysis}" type="Menu">
			<MenuItem id="Separator1" type="Separator" />
		</MenuItem>
		
		<MenuItem id = "Tools" label = "${res:XML.MainMenu.ToolMenu}" type="Menu">
			<MenuItem id = "ToolBuilder" type="Builder" class = "ICSharpCode.SharpDevelop.Commands.ToolMenuBuilder" />
			<MenuItem id = "Separator1" type = "Separator" />
			<Include id = "ToolList" path = "/Workspace/Tools" />
			<MenuItem id = "Separator2" type = "Separator" />
			
			<ComplexCondition action = "Disable">
				<Or>
					<Condition name = "WindowActive" activewindow="ICSharpCode.FormsDesigner.FormsDesignerViewContent"/>
					<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.ITextEditorControlProvider"/>
				</Or>
				<MenuItem id = "ConvertCode" label = "${res:XML.MainMenu.ToolMenu.ConvertCodeTo}" type="Menu">
					<Condition name="ActiveContentExtension" activeextension=".vb" action = "Disable">
						<MenuItem id = "CSharp"
						          label = "C#"
						          class = "ICSharpCode.SharpDevelop.Commands.CSharpConvertBuffer"/>
					</Condition>
					<Condition name="ActiveContentExtension" activeextension=".cs" action = "Disable">
						<MenuItem id = "VBNet"
						          label = "VB.NET"
						          class = "ICSharpCode.SharpDevelop.Commands.VBConvertBuffer"/>
					</Condition>
				</MenuItem>
			</ComplexCondition>
			
			<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.ITextEditorControlProvider" action="Disable">
				<MenuItem id = "GenerateCodeAction"
				          label = "${res:XML.MainMenu.ToolMenu.GenerateCode}"
				          shortcut = "Alt|Insert"
				          class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.GenerateCodeAction"/>
				<MenuItem id = "ShowQuickHelp"
				          label = "${res:XML.MainMenu.ToolMenu.QuickXmlDoc}"
				          shortcut = "Control|Q"
				          class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.QuickDocumentation"/>
			</Condition>
			
			<MenuItem id = "LastSeparator" type = "Separator" />
			
			<MenuItem id = "Options"
			          label = "${res:XML.MainMenu.ToolMenu.Options}"
			          icon = "Icons.16x16.Options"
			          class = "ICSharpCode.SharpDevelop.Commands.OptionsCommand"/>
		</MenuItem> <!-- end TOOLS menu -->
		
		<MenuItem id = "Window" label = "${res:XML.MainMenu.WindowMenu}" type="Menu">
			<Condition name = "WindowActive" activewindow="*"  action="Disable">
				<MenuItem id  = "NextWindow"
				          label = "${res:XML.MainMenu.WindowMenu.NxtWindow}"
				          icon = "Icons.16x16.NextWindowIcon"
				          shortcut = "Control|Tab"
				          class = "ICSharpCode.SharpDevelop.Commands.SelectNextWindow" />
				<MenuItem id = "PrevWindow"
				          label = "${res:XML.MainMenu.WindowMenu.PrvWindow}"
				          icon = "Icons.16x16.PrevWindowIcon"
				          shortcut = "Shift|Control|Tab"
				          class = "ICSharpCode.SharpDevelop.Commands.SelectPrevWindow" />
				<MenuItem id ="NxtPrvSeparator" type = "Separator" />
				<MenuItem id    = "CloseAll"
				          label = "${res:XML.MainMenu.FileMenu.CloseAll}"
				          icon  = "Icons.16x16.CloseAllDocuments"
				          class = "ICSharpCode.SharpDevelop.Commands.CloseAllWindows" />
			</Condition>
			<MenuItem id = "ContentBuilder"  type="Builder" class="ICSharpCode.SharpDevelop.Commands.OpenContentsMenuBuilder"/>
		</MenuItem>	 <!-- end WINDOW menu -->
		
		<MenuItem id = "Help" label = "${res:XML.MainMenu.HelpMenu}" type="Menu">
			<MenuItem id = "ContextHelp"
			          label = "${res:XML.MainMenu.HelpMenu.ContextHelp}"
			          icon = "Icons.16x16.HelpIcon"
			          shortcut = "F1"
			          class = "ICSharpCode.SharpDevelop.Commands.ShowSensitiveHelp"/>
			<MenuItem id = "Help"
			          label = "${res:XML.MainMenu.HelpMenu.Topics}"
			          shortcut = "Alt|F1"
			          link = "http://wiki.sharpdevelop.net/"/>
			<MenuItem id = "Separator1" type = "Separator" />
			<MenuItem id    = "ViewReadme"
			          label = "${res:XML.MainMenu.HelpMenu.ReadMe}"
			          link  = "home://doc/ReadMe.rtf" />
			<MenuItem id    = "ViewStyleguide"
			          label = "${res:XML.MainMenu.HelpMenu.StyleGuide}"
			          link  = "home://doc/technotes/CodingStyleGuide.rtf" />
			<MenuItem id = "Separator2" type = "Separator" />
			<MenuItem id = "Web" label = "${res:XML.MainMenu.HelpMenu.WebMenu}" type="Menu">
				<MenuItem id = "SharpDevelop" label = "SharpDevelop" type="Menu">
					<MenuItem id = "Downloads" label = "Downloads" icon = "Icons.16x16.WebSearchIcon" link = "http://www.sharpdevelop.net/OpenSource/SD/Download/" />
					<MenuItem id = "Forum" label = "Community Forums" icon = "Icons.16x16.WebSearchIcon" link = "http://community.sharpdevelop.net/forums/" />
					<MenuItem id = "Announcement" label = "Announcement List" icon = "Icons.16x16.WebSearchIcon" link = "http://www.sharpdevelop.net/OpenSource/SD/AnnouncementList.aspx" />
					<MenuItem id = "Mail" label = "Send Us a Mail" icon = "Icons.16x16.WebSearchIcon" link = "http://www.sharpdevelop.net/OpenSource/SD/ContactUs.asp" />
				</MenuItem>
				<MenuItem id = "C#" label = "C#" type="Menu">
					<MenuItem id = "C# Help" label = "C# Help" icon = "Icons.16x16.WebSearchIcon" link = "http://www.csharphelp.com" />
					<MenuItem id = "CodeProject" label = "CodeProject" icon = "Icons.16x16.WebSearchIcon" link = "http://www.codeproject.com" />
					<MenuItem id = "C# Corner" label = "C# Corner" icon = "Icons.16x16.WebSearchIcon" link = "http://www.c-sharpcorner.com" />
					<MenuItem id = "GotDotNet" label = "GotDotNet" icon = "Icons.16x16.WebSearchIcon" link = "http://www.gotdotnet.com/" />
				</MenuItem>
				<MenuItem id = "IntegratedProjects" label = "Integrated Projects" type="Menu">
					<MenuItem id = "DockManager Control" label = "DockPanel Suite" icon = "Icons.16x16.WebSearchIcon" link = "http://sourceforge.net/projects/dockpanelsuite/" />
					<MenuItem id = "NUnit" label = "NUnit" icon = "PadIcons.NUnitTest" link = "http://www.nunit.org/" />
					<MenuItem id = "WiX" label = "WiX" icon = "Icons.16x16.WebSearchIcon" link = "http://sourceforge.net/projects/wix/" />
					<MenuItem id = "SHFB" label = "Sandcastle Help File Builder" icon = "Icons.16x16.WebSearchIcon" link = "http://www.codeplex.com/SHFB" />
					<MenuItem id = "#ZipLib" label = "#ZipLib" icon = "Icons.16x16.WebSearchIcon" link = "http://www.sharpdevelop.net/OpenSource/SharpZipLib/" />
				</MenuItem>
				<MenuItem id = "NETPlatforms" label = ".NET Platforms" type="Menu">
					<MenuItem id = "MSNET"  label = "MS .NET" icon = "Icons.16x16.WebSearchIcon" link = "http://msdn.microsoft.com/net" />
					<MenuItem id = "Mono"   label = "Mono Project" icon = "Icons.16x16.WebSearchIcon" link = "http://www.mono-project.com/" />
					<MenuItem id = "DotGNU" label = "DotGNU" icon = "Icons.16x16.WebSearchIcon" link = "http://www.dotgnu.org" />
				</MenuItem>
			</MenuItem>
			<MenuItem id = "Separator3" type = "Separator" />
			<MenuItem id = "About"
			          label = "${res:XML.MainMenu.HelpMenu.About}"
			          icon = "Icons.16x16.AboutIcon"
			          class = "ICSharpCode.SharpDevelop.Commands.AboutSharpDevelop" />
		</MenuItem> <!-- end HELP menu -->
	</Path> <!-- end Main Menu -->
	
	<!-- create empty /Workspace/Tools path - it's included by the main menu -->
	<Path name = "/Workspace/Tools"/>
	
	<!-- TEXT EDITOR -->
	
	<Path name = "/SharpDevelop/Dialogs/OptionsDialog/CodingOptions">
		<DialogPanel id = "CodeTemplates"
		             label = "${res:Dialog.Options.CodeTemplatesText}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.CodeTemplatePanel"/>
	</Path>
	
	<Path name = "/AddIns/DefaultTextEditor/Formatter/XML">
		<Class id ="XmlFormatter" class = "ICSharpCode.SharpDevelop.DefaultEditor.XmlFormattingStrategy"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/DisplayBindings">
		<DisplayBinding id    = "Text"
		                insertafter = "Browser"
		                title = "${res:Gui.ProjectBrowser.OpenWith.Bindings.TextEditor}"
		                class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.TextEditorDisplayBinding" />
		<DisplayBinding id    = "ShellExecute"
		                insertafter = "Text"
		                title = "${res:Gui.ProjectBrowser.OpenWith.Bindings.DefaultWindowsApplication}"
		                class = "ICSharpCode.SharpDevelop.ShellExecuteDisplayBinding" />
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/DefaultTextEditor/ClassMemberContextMenu">
		<MenuItem id = "MenuBuilder" type="Builder" class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.ClassMemberMenuBuilder" />
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/DefaultTextEditor/ClassBookmarkContextMenu">
		<MenuItem id = "MenuBuilder" type="Builder" class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.ClassBookmarkMenuBuilder" />
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ClassBrowser/MemberContextMenu">
		<MenuItem id = "MenuBuilder" type="Builder" class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.ClassMemberMenuBuilder" />
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ClassBrowser/ClassContextMenu">
		<MenuItem id = "MenuBuilder" type="Builder" class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.ClassBookmarkMenuBuilder" />
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/DefaultTextEditor/Refactoring/Common">
		<MenuItem id = "Rename"
		          label = "${res:SharpDevelop.Refactoring.RenameCommand}"
		          class = "ICSharpCode.SharpDevelop.Refactoring.RenameLocalVariableCommand"/>
		<MenuItem id = "FindReferences"
		          label = "${res:SharpDevelop.Refactoring.FindReferencesCommand}"
		          class = "ICSharpCode.SharpDevelop.Refactoring.FindLocalVariableReferencesCommand"/>
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/DefaultTextEditor/Refactoring/LocalVariableDefinition">
		<Include id = "Common" path = "/SharpDevelop/ViewContent/DefaultTextEditor/Refactoring/Common"/>
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/DefaultTextEditor/Refactoring/LocalVariable">
		<Include id = "Common" path = "/SharpDevelop/ViewContent/DefaultTextEditor/Refactoring/Common"/>
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/DefaultTextEditor/Refactoring/ParameterDefinition">
		<Include id = "Common" path = "/SharpDevelop/ViewContent/DefaultTextEditor/Refactoring/Common"/>
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/DefaultTextEditor/Refactoring/Parameter">
		<Include id = "Common" path = "/SharpDevelop/ViewContent/DefaultTextEditor/Refactoring/Common"/>
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/DefaultTextEditor/ContextMenu">
		<MenuItem id = "Refactoring" type = "Builder" class = "ICSharpCode.SharpDevelop.Refactoring.RefactoringMenuBuilder"/>
		<Include id = "Cut" item = "/SharpDevelop/Workbench/MainMenu/Edit/Cut"/>
		<Include id = "Copy" item = "/SharpDevelop/Workbench/MainMenu/Edit/Copy"/>
		<Include id = "Paste" item = "/SharpDevelop/Workbench/MainMenu/Edit/Paste"/>
		<Include id = "Delete" item = "/SharpDevelop/Workbench/MainMenu/Edit/Delete"/>
		<MenuItem id = "Separator1" type = "Separator" />
		<MenuItem id = "Save"
		          label = "${res:XML.MainMenu.FileMenu.Save}"
		          icon = "Icons.16x16.SaveIcon"
		          shortcut = "Control|S"
		          class = "ICSharpCode.SharpDevelop.Commands.SaveFile"/>
		<MenuItem id = "SaveAs"
		          label = "${res:XML.MainMenu.FileMenu.SaveAs}"
		          class = "ICSharpCode.SharpDevelop.Commands.SaveFileAs"/>
		<MenuItem id = "File"
		          label = "${res:XML.MainMenu.FileMenu.Close}"
		          icon  = "Icons.16x16.CloseFileIcon"
		          class ="ICSharpCode.SharpDevelop.Commands.CloseFile"/>
		<MenuItem id = "Separator2" type = "Separator" />
		<MenuItem id = "Comment"
		          icon  = "Icons.16x16.CommentRegion"
		          label = "${res:XML.TextAreaContextMenu.CommentUncommentSelection}"
		          class= "ICSharpCode.SharpDevelop.DefaultEditor.Commands.CommentRegion"/>
		<MenuItem id = "Indent"
		          label = "${res:XML.TextAreaContextMenu.Indent}"
		          shortcut = "Control|I"
		          class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.IndentSelection" />
		
		<MenuItem id = "FileMode" label = "${res:XML.TextAreaContextMenu.FileMode}"  type="Menu">
			<MenuItem id = "HighlightBuilder" type="Builder" class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.HighlightingTypeBuilder" />
		</MenuItem>
		
		<MenuItem id = "Separator3" type = "Separator" />
		<MenuItem id = "Options"
		          label = "${res:XML.TextAreaContextMenu.BufferOptions}"
		          icon = "Icons.16x16.PropertiesIcon"
		          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.ShowBufferOptions"/>
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/DefaultTextEditor/ToolTips">
		<Class id = "DefaultDebuggerToolTips" class = "ICSharpCode.SharpDevelop.Debugging.DebuggerTextAreaToolTipProvider"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/ToolBar/Standard">
		<ToolbarItem id = "SearchSeparator" type = "Separator"/>
		<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.ITextEditorControlProvider" action="Disable">
			<ToolbarItem id = "Comment"
			             icon = "Icons.16x16.CommentRegion"
			             tooltip = "${res:XML.TextAreaContextMenu.CommentUncommentSelection}"
			             class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.CommentRegion"/>
			<!--				<ToolbarItem id = "Uncomment"
				             icon = "Icons.16x16.UnCommentRegion"
				             tooltip = "${res:XML.TextAreaContextMenu.UncommentSelection}"
				             class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.UncommentRegion"/> -->
			
			<ToolbarItem id = "SearchSeparator2" type = "Separator"/>
			<ToolbarItem id = "ToggleBookmark"
			             icon = "Bookmarks.ToggleMark"
			             tooltip = "${res:XML.MainMenu.SearchMenu.ToggleBookmark.Description}"
			             class = "ICSharpCode.SharpDevelop.Bookmarks.ToggleBookmark"/>
			<ToolbarItem id = "PrevBookmark"
			             icon = "Bookmarks.GotoPrevInFile"
			             tooltip = "${res:XML.MainMenu.SearchMenu.PrevBookmark.Description}"
			             class = "ICSharpCode.SharpDevelop.Bookmarks.PrevBookmark"/>
			<ToolbarItem id = "NextBookmark"
			             icon = "Bookmarks.GotoNextInFile"
			             tooltip = "${res:XML.MainMenu.SearchMenu.NextBookmark.Description}"
			             class = "ICSharpCode.SharpDevelop.Bookmarks.NextBookmark"/>
			<ToolbarItem id = "ClearBookmarks"
			             icon = "Bookmarks.ClearAll"
			             tooltip = "${res:XML.MainMenu.SearchMenu.ClrBookmark.Description}"
			             class = "ICSharpCode.SharpDevelop.Bookmarks.ClearBookmarks"/>
		</Condition>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/MainMenu/Window">
		<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.ITextEditorControlProvider" action="Disable">
			<MenuItem id = "SplitTextEditor"
			          insertafter="NxtPrvSeparator"
			          insertbefore="CloseAll"
			          label = "${res:XML.MainMenu.WindowMenu.Split}"
			          icon  = "Icons.16x16.SplitWindow"
			          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.SplitTextEditor"/>
		</Condition>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/MainMenu/Edit">
		<MenuItem insertafter = "Delete" insertbefore = "SelectAll" id = "Separator2" type = "Separator" />
		<MenuItem insertafter = "Separator2" insertbefore = "Separator3" id = "Format" label = "${res:XML.MainMenu.EditMenu.FormatMenu}" type="Menu">
			<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.ITextEditorControlProvider" action="Disable">
				
				<MenuItem id = "RemoveLeadingWs"
				          label = "${res:XML.MainMenu.EditMenu.FormatMenu.RlWs}"
				          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.RemoveLeadingWS"/>
				<MenuItem id = "RemoveTrailingWs"
				          label = "${res:XML.MainMenu.EditMenu.FormatMenu.RtWs}"
				          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.RemoveTrailingWS"/>
				<MenuItem id = "Seperator1" type = "Separator" />
				<MenuItem id = "UpperCase"
				          label = "${res:XML.MainMenu.EditMenu.FormatMenu.UpperCase}"
				          icon = "Icons.16x16.LowerToUpperCase"
				          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.ToUpperCase"/>
				<MenuItem id = "LowerCase"
				          label = "${res:XML.MainMenu.EditMenu.FormatMenu.LowerCase}"
				          icon = "Icons.16x16.UpperToLowerCase"
				          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.ToLowerCase"/>
				<MenuItem id = "Capitalize"
				          label = "${res:XML.MainMenu.EditMenu.FormatMenu.Capitalize}"
				          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.CapitalizeAction"/>
				<MenuItem id = "InvertCase"
				          label = "${res:XML.MainMenu.EditMenu.FormatMenu.InvertCase}"
				          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.InvertCaseAction"/>
				<MenuItem id = "Separator2" type = "Separator" />
				<MenuItem id = "SortSelection"
				          label = "${res:XML.MainMenu.EditMenu.FormatMenu.SortLines}"
				          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.SortSelection"/>
				<MenuItem id = "Separator3" type = "Separator" />
				<MenuItem id = "Tabs2Spaces"
				          label = "${res:XML.MainMenu.EditMenu.FormatMenu.Tab2Space}"
				          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.ConvertTabsToSpaces"/>
				<MenuItem id = "Spaces2Tabs"
				          label = "${res:XML.MainMenu.EditMenu.FormatMenu.Space2Tab}"
				          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.ConvertSpacesToTabs"/>
				<MenuItem id = "LeadingTabs2Spaces"
				          label = "${res:XML.MainMenu.EditMenu.FormatMenu.LdTab2Space}"
				          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.ConvertLeadingTabsToSpaces"/>
				<MenuItem id = "LeadingSpaces2Tabs"
				          label = "${res:XML.MainMenu.EditMenu.FormatMenu.LdSpace2Tab}"
				          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.ConvertLeadingSpacesToTabs"/>
				<MenuItem id = "Separator4" type = "Separator" />
				<MenuItem id = "Comment"
				          icon  = "Icons.16x16.CommentRegion"
				          label = "${res:XML.TextAreaContextMenu.CommentUncommentSelection}"
				          class= "ICSharpCode.SharpDevelop.DefaultEditor.Commands.CommentRegion"/>
				<MenuItem id = "Indent"
				          label = "${res:XML.TextAreaContextMenu.Indent}"
				          shortcut = "Control|I"
				          class = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.IndentSelection" />
			</Condition>
		</MenuItem>
		<MenuItem insertafter = "Format" insertbefore = "Separator3" id = "Folding" label = "${res:XML.MainMenu.EditMenu.FoldingMenu}" type="Menu">
			<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.ITextEditorControlProvider" action="Disable">
				<MenuItem id          = "ToggleFolding"
				          label       = "${res:XML.MainMenu.EditMenu.FoldingMenu.ToggleFolding}"
				          shortcut    = "Shift|Control|M"
				          class       = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.ToggleFolding"/>
				<MenuItem id          = "ToggleAllFoldings"
				          label       = "${res:XML.MainMenu.EditMenu.FoldingMenu.ToggleAllFoldings}"
				          shortcut    = "Shift|Control|L"
				          class       = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.ToggleAllFoldings"/>
				<MenuItem id          = "ShowDefinitionsOnly"
				          label       = "${res:XML.MainMenu.EditMenu.FoldingMenu.ShowDefinitions}"
				          shortcut    = "Shift|Control|P"
				          class       = "ICSharpCode.SharpDevelop.DefaultEditor.Commands.ShowDefinitionsOnly"/>
			</Condition>
		</MenuItem>
		<MenuItem insertafter = "Separator2" insertbefore = "SelectAll" id = "Separator3" type = "Separator" />
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/DefaultTextEditor/OptionsDialog">
		<DialogPanel id = "General"
		             label = "${res:Dialog.Options.IDEOptions.General}"
		             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.GeneralTextEditorPanel"/>
		<DialogPanel id = "Markers"
		             label = "${res:Dialog.Options.IDEOptions.TextEditor.Markers.PanelName}"
		             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.MarkersTextEditorPanel"/>
		<DialogPanel id = "Behavior"
		             label = "${res:Dialog.Options.IDEOptions.TextEditor.Behaviour.PanelName}"
		             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.BehaviorTextEditorPanel"/>
		<DialogPanel id = "CodeCompletion"
		             label = "${res:Dialog.Options.IDEOptions.TextEditor.CodeCompletion.PanelName}"
		             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.CodeCompletionPanel"/>
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/Browser/Toolbar">
		<ToolbarItem id      = "Back"
		             icon    = "Icons.16x16.BrowserBefore"
		             tooltip = "${res:AddIns.HtmlHelp2.Back}"
		             class   = "ICSharpCode.SharpDevelop.BrowserDisplayBinding.GoBack"/>
		
		<ToolbarItem id      = "Forward"
		             icon    = "Icons.16x16.BrowserAfter"
		             tooltip = "${res:AddIns.HtmlHelp2.Forward}"
		             class   = "ICSharpCode.SharpDevelop.BrowserDisplayBinding.GoForward"/>
		
		<ToolbarItem id      = "Stop"
		             icon    = "Icons.16x16.BrowserCancel"
		             tooltip = "${res:AddIns.HtmlHelp2.Stop}"
		             class   = "ICSharpCode.SharpDevelop.BrowserDisplayBinding.Stop"/>
		
		<ToolbarItem id      = "Refresh"
		             icon    = "Icons.16x16.BrowserRefresh"
		             tooltip = "${res:AddIns.HtmlHelp2.Refresh}"
		             class   = "ICSharpCode.SharpDevelop.BrowserDisplayBinding.Refresh"/>
		
		<ToolbarItem id = "Separator" type  = "Separator"/>
		
		<ToolbarItem id      = "GoHome"
		             icon    = "Icons.16x16.BrowserHome"
		             tooltip = "${res:AddIns.HtmlHelp2.Homepage}"
		             class   = "ICSharpCode.SharpDevelop.BrowserDisplayBinding.GoHome"/>
		
		<ToolbarItem id      = "GoSearch"
		             icon    = "Icons.16x16.FindIcon"
		             tooltip = "${res:AddIns.HtmlHelp2.Search}"
		             class   = "ICSharpCode.SharpDevelop.BrowserDisplayBinding.GoSearch"/>
		
		<ToolbarItem id      = "URLComboBox"
		             type    = "ComboBox"
		             tooltip = "${res:AddIns.HtmlHelp2.EnterURL}"
		             class   = "ICSharpCode.SharpDevelop.BrowserDisplayBinding.UrlComboBox"/>
		
		<ToolbarItem id      = "NewWindow"
		             icon    = "Icons.16x16.BrowserWindow"
		             tooltip = "${res:AddIns.HtmlHelp2.NewWindow}"
		             class   = "ICSharpCode.SharpDevelop.BrowserDisplayBinding.NewWindow"/>
	</Path>
	
	<Path name = "/SharpDevelop/Dialogs/OptionsDialog">
		<DialogPanel id    = "TextEditorOptions"
		             insertafter = "CodingOptions"
		             insertbefore = "ToolsOptions"
		             label = "${res:Dialog.Options.IDEOptions.TextEditorOptionsText}">
			<DialogPanel id = "General"
			             label = "${res:Dialog.Options.IDEOptions.General}"
			             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.GeneralTextEditorPanel"/>
			<DialogPanel id = "Markers"
			             label = "${res:Dialog.Options.IDEOptions.TextEditor.Markers.PanelName}"
			             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.MarkersTextEditorPanel"/>
			<DialogPanel id = "Behavior"
			             label = "${res:Dialog.Options.IDEOptions.TextEditor.Behaviour.PanelName}"
			             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.BehaviorTextEditorPanel"/>
			<DialogPanel id = "CodeCompletion"
			             label = "${res:Dialog.Options.IDEOptions.TextEditor.CodeCompletion.PanelName}"
			             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.CodeCompletionPanel"/>
		</DialogPanel>
	</Path>
	
	<!-- Note : Most actions are put directly into the control, because
	            they're used for the standalone version too, only put keys in the
	            tree that are sharpdevelop specific, general keys put into TextAreaControl.GenerateDefaultActions --> 
	<Path name = "/AddIns/DefaultTextEditor/EditActions">
		<EditAction id = "TemplateCompletion"  class = "ICSharpCode.SharpDevelop.DefaultEditor.Actions.TemplateCompletion"  keys = "Control|J"/>
		<EditAction id = "CodeCompletionPopup" class = "ICSharpCode.SharpDevelop.DefaultEditor.Actions.CodeCompletionPopup"  keys = "Control|Space"/>
		<EditAction id = "GoToDefinition"      class = "ICSharpCode.SharpDevelop.DefaultEditor.Actions.GoToDefinition"  keys = "Control|Enter"/>
		<EditAction id = "ExpandTemplateAction" class = "ICSharpCode.SharpDevelop.DefaultEditor.Actions.ExpandTemplateAction"  keys = "Tab"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/BookmarkPad/Toolbar">
		<ToolbarItem id      = "GotoPrev"
		             icon    = "Bookmarks.GotoPrev"
		             tooltip = "${res:MainWindow.Windows.BookmarkPad.GotoPrev.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Bookmarks.GotoPrev"/>
		<ToolbarItem id      = "GotoNext"
		             icon    = "Bookmarks.GotoNext"
		             tooltip = "${res:MainWindow.Windows.BookmarkPad.GotoNext.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Bookmarks.GotoNext"/>
		<ToolbarItem id = "GotoInFolderSeparator" type = "Separator" />
		<ToolbarItem id      = "EnableDisableAll"
		             icon    = "Bookmarks.EnableDisableAll"
		             tooltip = "${res:MainWindow.Windows.BookmarkPad.EnableDisableAll.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Bookmarks.EnableDisableAll"/>
		<ToolbarItem id = "EnableDisableSeparator" type = "Separator" />
		<ToolbarItem id      = "DeleteMark"
		             icon    = "Bookmarks.DeleteMark"
		             tooltip = "${res:MainWindow.Windows.BookmarkPad.DeleteMark.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Bookmarks.DeleteMark"/>
		<ToolbarItem id = "EnableDisableSeparator" type = "Separator" />
		<ToolbarItem id      = "DeleteAllMarks"
		             icon    = "Bookmarks.DeleteAllMarks"
		             tooltip = "${res:MainWindow.Windows.BookmarkPad.DeleteAllMarks.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Bookmarks.DeleteAllMarks"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/SearchResultPanel/Toolbar">
		<Condition name = "Ownerstate" ownerstate = "DefaultMode" action = "Exclude">
			<ToolbarItem id      = "ExpandAll"
			             icon    = "Icons.16x16.OpenAssembly"
			             tooltip = "${res:MainWindow.Windows.SearchResultPanel.ExpandAll.ToolTip}"
			             class   = "SearchAndReplace.ExpandAll"/>
			
			<ToolbarItem id      = "CollapseAll"
			             icon    = "Icons.16x16.Assembly"
			             tooltip = "${res:MainWindow.Windows.SearchResultPanel.CollapseAll.ToolTip}"
			             class   = "SearchAndReplace.CollapseAll"/>
			<ToolbarItem id = "ExpandCollapseSeparator" type = "Separator" />
		</Condition>
		
		<ToolbarItem id      = "ShowLast"
		             type    = "DropDownButton"
		             icon    = "Icons.16x16.FindIcon"
		             tooltip = "${res:MainWindow.Windows.SearchResultPanel.ShowLast.ToolTip}"
		             class   = "SearchAndReplace.ShowLastSearchResults"/>
		
		<Condition name = "Ownerstate" ownerstate = "DefaultMode" action = "Exclude">
			<ToolbarItem id      = "SelectViewMode"
			             type    = "DropDownButton"
			             icon    = "Icons.16x16.FindIcon"
			             tooltip = "${res:MainWindow.Windows.SearchResultPanel.SelectViewMode.ToolTip}"
			             class   = "SearchAndReplace.SelectViewMode"/>
		</Condition>
	</Path>
	
	<Path name = "/Workspace/Icons">
		<!-- Resources -->
		<Icon id         = "ResourceFileIcon"
		      extensions = ".resources;.resx"
		      resource   = "Icons.16x16.ResourceFileIcon" />
		
		<!-- XML -->
		<Icon id         = "XmlFileIcon"
		      extensions = ".xml"
		      resource   = "FileIcons.XmlIcon" />
		
		<Icon id         = "DtdFileIcon"
		      extensions = ".dtd"
		      resource   = "Icons.16x16.DTDIcon"/>
		
		<Icon id         = "XsdFileIcon"
		      extensions = ".xsd"
		      resource   = "Icons.16x16.XSDIcon"/>
		
		<Icon id         = "XslFileIcon"
		      extensions = ".xsl"
		      resource   = "Icons.16x16.XSLIcon"/>
		
		<Icon id         = "HtmlFileIcon"
		      extensions = ".html;.htm"
		      resource   = "Icons.16x16.HTMLIcon"/>
		
		<Icon id         = "AspFileIcon"
		      extensions = ".asp;.aspx"
		      resource   = "Icons.16x16.ASPFileIcon"/>
		
		<Icon id         = "AddInFileIcon"
		      extensions = ".addin"
		      resource   = "Icons.16x16.AddInIcon" />
		
		<!-- TextFiles -->
		<Icon id         = "TextFileIcon"
		      extensions = ".txt;.doc"
		      resource   = "Icons.16x16.TextFileIcon"/>
		
		<Icon id= "CssFileIcon"
		      extensions = ".css"
		      resource   = "Icons.16x16.CSSIcon"/>
		<Icon id         = "StrongNameKeyFileIcon"
		      extensions = ".snk"
		      resource   = "Icons.16x16.StrongNameKeyFileIcon"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/MainMenu/View">
		<MenuItem id    = "Debugger"
		          label = "${res:XML.MainMenu.ViewMenu.DebugMenu}"
		          type  = "Menu"
		          insertafter  = "Tools"
		          insertbefore = "ViewItemsSeparator">
			<MenuItem id    = "DebugViewMenuBuilder"
			          type  = "Builder"
			          class = "ICSharpCode.SharpDevelop.Commands.DebugViewMenuBuilder"/>
		</MenuItem>
	</Path>
	
	<Path name = "/SharpDevelop/Views/ProjectBrowser/NodeBuilders">
		<Class id = "DefaultBuilder"
		       class = "ICSharpCode.SharpDevelop.Project.DefaultDotNetNodeBuilder"/>
	</Path>
	
	<Path name = "/SharpDevelop/Views/ClassBrowser/ProjectNodeBuilders">
		<Class id = "DefaultProjectBuilder"
		       class = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.DefaultProjectNodeBuilder"/>
	</Path>
	
	<Path name = "/SharpDevelop/Views/ClassBrowser/ClassNodeBuilders">
		<Class id = "DefaultClassBuilder"
		       class = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.DefaultClassNodeBuilder"/>
	</Path>
	
	<Path name = "/AddIns/DefaultTextEditor/CodeGenerator">
		<Class id="ConstructorCodeGenerator"
		       class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.ConstructorCodeGenerator"/>
		<Class id="GetterCodeGenerator"
		       class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.GetterCodeGenerator"/>
		<Class id="SetterCodeGenerator"
		       class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.SetterCodeGenerator"/>
		<Class id="GetterAndSetterCodeGenerator"
		       class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.GetterAndSetterCodeGenerator"/>
		<Class id="OnXXXMethodsCodeGenerator"
		       class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.OnXXXMethodsCodeGenerator"/>
		<Class id="OverrideMethodsCodeGenerator"
		       class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.OverrideMethodsCodeGenerator"/>
		<Class id="OverridePropertiesCodeGenerator"
		       class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.OverridePropertiesCodeGenerator"/>
		<Class id="InterfaceImplementorCodeGenerator"
		       class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.InterfaceImplementorCodeGenerator"/>
		<Class id="AbstractClassImplementorCodeGenerator"
		       class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.AbstractClassImplementorCodeGenerator"/>
		<Class id="ToStringCodeGenerator"
		       class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.ToStringCodeGenerator"/>
		<Class id="EqualsCodeGenerator"
		       class="ICSharpCode.SharpDevelop.DefaultEditor.Commands.EqualsCodeGenerator"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/DependentFileExtensions">
		<String id = "FormsDesignerGeneratedCode" text=".Designer${Extension}"/>
		<String id = "FormsDesignerResources"     text=".resx"/>
	</Path>
	
	<Path name="/SharpDevelop/BackendBindings/ProjectOptions/AllManaged">
		<!-- put project option panels valid for all .NET projects here -->
	</Path>
	
	<Path name="/SharpDevelop/Pads/ErrorList/TaskContextMenu">
		<MenuItem id = "Copy"
		          label = "${res:XML.MainMenu.EditMenu.Copy}"
		          type = "Item"
		          icon = "Icons.16x16.CopyIcon"
		          class = "ICSharpCode.SharpDevelop.Commands.Copy"/>
	</Path>
	
	<Path name="/SharpDevelop/Pads/TaskList/Toolbar">
		<ToolbarItem id = "SelectScope"
		             class = "ICSharpCode.SharpDevelop.Gui.SelectScopeCommand"
		             type = "ComboBox"/>
	</Path>
	
	<Path name="/SharpDevelop/Pads/TaskList/TaskContextMenu">
		<MenuItem id = "Copy"
		          label = "${res:XML.MainMenu.EditMenu.Copy}"
		          type = "Item"
		          icon = "Icons.16x16.CopyIcon"
		          class = "ICSharpCode.SharpDevelop.Commands.Copy"/>
	</Path>
	
	<Path name="/SharpDevelop/Services/ParserService/SingleFileGacReferences">
		<String id = "System" text = "System"/>
		<String id = "System.Core" text = "System.Core"/>
		<String id = "System.Data" text = "System.Data"/>
		<String id = "System.Data.DataSetExtensions" text = "System.Data.DataSetExtensions"/>
		<String id = "System.Drawing" text = "System.Drawing"/>
		<String id = "System.Web" text = "System.Web"/>
		<String id = "System.Windows.Forms" text = "System.Windows.Forms"/>
		<String id = "System.Xml" text = "System.Xml"/>
		<String id = "System.Xml.Linq" text = "System.Xml.Linq"/>
	</Path>
	
	<Path name = "/Workspace/ProjectContentRegistry">
		<ComplexCondition>
			<Or>
				<Condition name = "ProjectActive" activeproject="C#"/>
				<Condition name = "ProjectActive" activeproject="VBNet"/>
			</Or>
			<Condition name = "CompareProjectProperty" property = "SharpDevelopTargetFrameworkVersion" equals = "CF 2.0">
				<ProjectContentRegistry id="NetCF20" class="ICSharpCode.SharpDevelop.NetCF20ProjectContentRegistry"/>
			</Condition>
			<Condition name = "CompareProjectProperty" property = "SharpDevelopTargetFrameworkVersion" equals = "CF 3.5">
				<ProjectContentRegistry id="NetCF35" class="ICSharpCode.SharpDevelop.NetCF35ProjectContentRegistry"/>
			</Condition>
		</ComplexCondition>
	</Path>
	
	<Path name = "/SharpDevelop/BackendBindings/TemplateCommands">
		<Class id="AddDotNet35ReferencesIfTargetFrameworkIs35"
		       class="ICSharpCode.SharpDevelop.Project.Commands.AddDotNet35ReferencesIfTargetFrameworkIs35Command"/>
	</Path>
	
	<Path name = "/SharpDevelop/Views/ProjectBrowser/ContextSpecificProperties">
		<ComplexCondition>
			<Not>
				<Condition name = "ProjectItem" property = "Generator" value = ""/>
			</Not>
			<CustomProperty id = "CustomToolNamespace"
			                name = "CustomToolNamespace"
			                displayName = "${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectFile.CustomToolNamespace}"
			                description = "${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectFile.CustomToolNamespace.Description}"
			                runCustomTool="True" />
		</ComplexCondition>
		<Condition name = "ProjectItem" itemType = "EmbeddedResource">
			<CustomProperty id = "EmbeddedResourceLogicalName"
			                name = "LogicalName"
			                displayName = "${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectFile.LogicalName}"
			                description = "${res:ICSharpCode.SharpDevelop.Internal.Project.ProjectFile.LogicalName.Description}" />
		</Condition>
	</Path>
</AddIn>
